<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">Drools 8 Final &amp;#8211; toward a modular and cloud native rule engine</title><link rel="alternate" href="https://blog.kie.org/2022/10/drools-8-final-toward-a-modular-and-cloud-native-rule-engine.html" /><author><name>Mario Fusco</name></author><id>https://blog.kie.org/2022/10/drools-8-final-toward-a-modular-and-cloud-native-rule-engine.html</id><updated>2022-10-17T12:30:20Z</updated><content type="html">The Drools team is happy to announce that our rule engine reached the 8 Final release. Drools 8-series is a natural evolution of the 7.x-stream, incorporating many features and lessons learned integrating with Kogito and many cloud-native use cases. The purpose of this article is to give a high level overview of the features introduced with this new major release and give some insights on the next developments on which we are working. Let us know your feedback while using these new Drools 8 capabilities, as we are iterating our future plans on them! DEVELOPER EXPERIENCE WRITE RULES IN PURE JAVA (OR BRING-YOUR-OWN-LANGUAGE)! While you know you have learned to love our very own Drools Rule Language (DRL), we also understand how hard can it be devoting time to learn a new programming language, as close to Java it may be! We hear you! This is why, with Drools 8, we are introducing a to write rules without leaving the comfort of your traditional IDE. In fact, this allows you to write rules in your favorite JVM language, including Scala and Kotlin! SKYROCKETING TO THE CLOUD: THE DROOLS QUARKUS EXTENSION  We are also working on introducing a new Drools-focused Quarkus extension; this extension is dedicated to enable the use of the Drools core engine as part of a Quarkus application. Please notice this new Drools Quarkus extension is not a replacement for . For more comprehensive capabilities in cloud-native scenarios which are not part of this new extension, such as automatic REST endpoint generation, we invite developers to keep using and explore Kogito. Because of its experimental nature, it is currently not available on the main Quarkus channels, but you can find a and a in the Drools repository at those links. NOT JUST RULES: A MODULAR ENGINE FOR AI Up to version 7 Drools was a monolithic rule engine with all its features implemented (and tightly interconnected) in one single core module. In Drools 8 the engine has been heavily reworked to make it more modular, isolating the non-core features, like the Truth Maintenance System (TMS), the protobuf based serialization and the experimental support for traits and different belief systems, in separated modules that the users can optionally bring into their projects only when specifically required.  But this modularization effort didn’t stop there. The main and ambitious goal is to make Drools a container where many other AI related technologies, like DMN and PMML, can coexist and cooperate. With this goal in mind it has developed an internal framework, with codename Efesto, allowing to plug different engines and to let them leverage each other in a loosely coupled way.  CODENAME EFESTO: AN INTERNAL COMPILE-TIME AND RUN-TIME COORDINATION FRAMEWORK Over the years a common pattern emerged in our engines. They all have a phase where, very broadly, a source model is translated to an executable unit (compilation); and they all have a phase where that executable unit is used to make actual evaluation (runtime). Besides, some of them may need to invoke others for full evaluation, e.g. some decision models invoke prediction’ ones,  and some prediction models use the rule engine. Efesto is the codename we gave the internal framework we designed to provide a common, stable, unified API to support such phases, and allow to chain the processing of different models, either at compile-time or at run-time. The benefit is improved code reusability and overall simplification of such processing phases. We plan to use this new API both for integrating engines with each other (when a source model needs to refer to a different source model) and to easily extend usage of current implementations in different environments. More details about the overall design can be found in , while a deeper technical explanation has been provided in . RULE UNITS: A NEW MODULAR PROGRAMMING MODEL FOR RULES The definition of large rule bases has always made evident the need of slicing it in logically independent subparts. In the past Drools fulfilled this requirement in a few different ways: it is possible to split the rules in multiple KieBase and make a KieBase to include others, rules in the same KieBase can be further organized into agenda-groups and also the working memory can be partitioned unisg entry-points. A rule unit is a unified, top-down module, describing a set of rules; the unit describes also the shape of the data that such rules are able to manipulate, through the introduction of the "data source" abstraction that partitions the working memory into the typed equivalent of an entry point. In other words, a rule unit encapsulates the unit of execution for rules and the data against which the rules will be matched. More information about how rule units and data sources are available .  The new Java-based DSL builds upon the rule unit concept, but you can still define rule units using good ol’ DRL! EXPERIMENTAL FEATURES AND WHAT’S NEXT The Drools team keeps experimenting with new features that could bring new capabilities to the engine or improve the overall user experience. At the moment the efforts to bring forward these experiments are concentrated in 2 main areas. IMPACT ANALYSIS The feature analyzes the relationships between the rules generating an oriented graph that shows which rules can be impacted by the firing of another rule. In this way, when it is necessary to analyze the impact of a change to a specific rule, it becomes easy to visually determine which part of a rules set will be interested by this change. DRL CODE EDITOR A DRL code editor based on Language Server Protocol (LSP) is currently under development. LSP could be applied to various IDEs and editors like VS Code and Neovim via extensions, plugins, or configuration. Not yet released at the moment, but stay tuned! FROM DROOLS 7 TO 8 Despite all the new features introduced during the development of Drools 8, the old API based on the old KieContainer/Base/Session is still fully working and supported, so if you’re not comfortable in migrating immediately your existing codebase relying on the Drools 7 API, this won’t prevent you to upgrade to Drools 8. Nevertheless we strongly suggest you to also give a look at the new rule unit based programming model and evaluate if it could be a better fit for your needs. If you are still in doubt, try the Java-based DSL and let us know! These can be very helpful to support your migration plans from Drools 7 to Drools 8, including directions on how to . JDK 11 is now the minimum requirement to run Drools, while at least maven 3.8.6 is necessary to build Drools from sources or use the maven integration capabilities provided by the kie-ci module. More information on this, including a minimal list of the features that have been deprecated with Drools 8 or retired, is available in the .  A NOTE ON VERSION NUMBERING It may be surprising that we deployed the first stable release of Drools 8 Final with version Drools 8.29.0.Final. We did so for the twofold reason of continuing with the numbering of the minor version that we started while Drools 8 was still in beta and avoiding confusion with other downstream projects of the kie group like Kogito and OptaPlanner that are aligned with the same minor version. REFERENCES You can find the . The post appeared first on .</content><dc:creator>Mario Fusco</dc:creator></entry><entry><title>How to fix issues caused by reusing Go error variables</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/10/17/fix-issues-reusing-go-error-variables" /><author><name>Massimiliano Ziccardi</name></author><id>08db59ca-2473-4722-9329-8eb2c8ccac4e</id><updated>2022-10-17T07:00:00Z</updated><published>2022-10-17T07:00:00Z</published><summary type="html">&lt;p&gt;This article discusses issues caused by reusing error variables in &lt;a href="https://developers.redhat.com/topics/go"&gt;Go&lt;/a&gt; code. I will begin by illustrating the problem with a fictional company called ACME Corporation and its software engineer Wile E. Then I will present trivial examples to reveal the problem and how to avoid it.&lt;/p&gt; &lt;h2&gt;The story of a reused Go error variable&lt;/h2&gt; &lt;p&gt;A user opened a new issue to ACME Corporation because he noticed that users could enter any string into the phone number on the contact form. Wile E. is in charge of implementing a fix.&lt;/p&gt; &lt;p&gt;Wile E. examines the code:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;func StoreAllContacts() { for _, c := range contactsToStore { err := legacy.StoreContact(&amp;c) if err != nil { fmt.Printf("Error storing %v: %v\n", c, err) } else { fmt.Printf("Contact NAME: %s, SURNAME: %s, PHONE: %s stored successfully!\n", c.Name, c.Surname, c.PhoneNumber) } } }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When he runs the code, he sees the following output:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;Contact NAME: John, SURNAME: Doe, PHONE: (012) 3456789 stored successfully! Contact NAME: Jane, SURNAME: Doe, PHONE: (089) 3456789 stored successfully! Contact NAME: Tom, SURNAME: Doe, PHONE: (083) 1234567 stored successfully!&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wile thinks, "OK. Fixing the code should be easy. I will add the check for the phone number format just before calling the &lt;code&gt;StoreContact&lt;/code&gt; function."&lt;/p&gt; &lt;p&gt;Then, Wile produces the following code:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;const phoneNumberRe = `\(\d{3}\) \d{7}` func validatePhoneNumber(phoneNumber string) (bool, error) { re, err := regexp.Compile(phoneNumberRe) if err != nil { return false, err } return re.MatchString(phoneNumber), nil } func StoreAllContacts() { for _, c := range contactsToStore { valid, err := validatePhoneNumber(c.PhoneNumber) if err != nil { fmt.Printf("Invalid phone number RE ('%s'). Validation ignored.\n", phoneNumberRe) } if !valid { fmt.Printf("Invalid phone number '%s' for '%s %s'", c.PhoneNumber, c.Name, c.Surname) } err = legacy.StoreContact(&amp;c) if err != nil { fmt.Printf("Error storing %v: %v\n", c, err) } } }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wile runs the code, but the output is not what he expected:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;Error storing {John Doe (012) 3456789}: &lt;nil&gt; Error storing {Jane Doe (089) 3456789}: &lt;nil&gt; Error storing {Tom Doe (083) 1234567}: &lt;nil&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wile wonders what is happening: "The program enters the &lt;code&gt;if err != nil&lt;/code&gt; branch, but then the output of the &lt;code&gt;fmt.Printf &lt;/code&gt;shows that &lt;code&gt;err&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;..."&lt;/p&gt; &lt;p&gt;What makes Wile even more confused is that he didn't change anything inside &lt;code&gt;StoreContact.&lt;/code&gt; So he wonders why the behavior changed.&lt;/p&gt; &lt;p&gt;After some debugging, Wile decides to look at the &lt;code&gt;StoreContact&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;func StoreContact(c *Contact) *ContactError { if err := c.validate(); err != nil { return err } // ... store the contact somewhere return nil }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Wile: "Oh! There it is!"&lt;/p&gt; &lt;p&gt;Wile gets permission to fix the function as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;func StoreContact(c *Contact) error { if err := c.validate(); err != nil { return err } // ... store the contact somewhere return nil } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When he reruns the code, it finally works as expected. But how did he arrive at this fix?&lt;/p&gt; &lt;h2&gt;The fix explained: The hidden dynamic type&lt;/h2&gt; &lt;p&gt;To understand the issue, let's look at the following code:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;package main import "fmt" type MyTestError struct { } func (MyTestError) Error() string { return "Test Error String" } func main() { var err error // (1) fmt.Println("Is err nil?", err == nil) var mytesterror *MyTestError // (2) fmt.Println("Is mytesterror nil?", mytesterror == nil) err = mytesterror // (3) fmt.Println("Is err nil?", err == nil) } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here are descriptions of the commented-out numbers:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;We create a variable of type &lt;code&gt;error&lt;/code&gt;. We didn't assign any value to it, so it will be &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;We create a variable of type &lt;code&gt;*MyTestError&lt;/code&gt;. As before, we didn't give any value to it, so it will be &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;We assign &lt;code&gt;mytesterror&lt;/code&gt; (nil) to &lt;code&gt;err&lt;/code&gt;. Since &lt;code&gt;mytesterror&lt;/code&gt; is nil, should be nil too.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Let's try to run the code (you can run it at the &lt;a href="https://go.dev/play/p/0kiJPD8NAEe"&gt;Go Playground&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;Is err nil? true Is mytesterror nil? true Is err nil? false&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The reason for this unexpected behavior is that the &lt;code&gt;interface&lt;/code&gt; type in Go is composed of a &lt;code&gt;value&lt;/code&gt; and a &lt;code&gt;dynamic type&lt;/code&gt;. The interface is considered &lt;code&gt;nil&lt;/code&gt; only when the value and the type are &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;With that in mind, let's look again at the code:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;We create a variable of type &lt;code&gt;error&lt;/code&gt;. We didn't assign any value to it, so it will be &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;We create a variable of type &lt;code&gt;*MyTestError&lt;/code&gt;. As before, we didn't give any value to it, so it will be &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;We assign &lt;code&gt;mytesterror&lt;/code&gt; (that is, &lt;code&gt;nil&lt;/code&gt;) to &lt;code&gt;err&lt;/code&gt;. After this assignment, the value of the &lt;code&gt;err&lt;/code&gt; interface is &lt;code&gt;nil&lt;/code&gt;, but the type is &lt;code&gt;*MyTestError&lt;/code&gt;. As explained, an interface with a non-nil type is not nil even if the value is &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;To make the issue more evident, let's run the following code:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;package main import "fmt" type MyTestError struct { } func (MyTestError) Error() string { return "Test Error String" } func main() { var err error // (1) fmt.Println("Type of err:", reflect.TypeOf(err)) fmt.Println("Is err nil?", err == nil) var mytesterror *MyTestError // (2) fmt.Println("Type of mytesterror:", reflect.TypeOf(mytesterror)) fmt.Println("Is mytesterror nil?", mytesterror == nil) err = mytesterror // (3) fmt.Println("Type of err:", reflect.TypeOf(err)) fmt.Println("Is err nil?", err == nil) }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output is:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;Type of err: &lt;nil&gt; Is err nil? true Type of mytesterror: *main.MyTestError Is mytesterror nil? true Type of err: *main.MyTestError Is err nil? false&lt;/code&gt; &lt;/pre&gt; &lt;p&gt;The assignment changed the type of &lt;code&gt;err&lt;/code&gt; from &lt;code&gt;&lt;nil&gt;&lt;/code&gt; to &lt;code&gt;*main.MyTestError.&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The same happens with code like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;package main import ( "fmt" "reflect" ) type MyTestError struct { } func (MyTestError) Error() string { return "Test Error String" } func MyTestFunc() error { var err *MyTestError return err } func main() { err := MyTestFunc() if err != nil { fmt.Println("An error has occurred: ", err) fmt.Println("Type of err: ", reflect.TypeOf(err)) return } fmt.Println("Success!") }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you try to run it in &lt;a href="https://go.dev/play/p/sZm1T9dAtWd"&gt;Go Playground&lt;/a&gt;, you will get the following output:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;An error has occurred: &lt;nil&gt; Type of err: *main.MyTestError&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The reason why this happens should now be apparent by now: to return the error, Go copied the value of &lt;code&gt;err&lt;/code&gt; (of type &lt;code&gt;*MyTestError&lt;/code&gt;) to a variable of type &lt;code&gt;error&lt;/code&gt;: exactly as we did in the previous example.&lt;br /&gt; We can quickly fix the code returning a naked nil:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;package main import ( "fmt" "reflect" ) type MyTestError struct { } func (MyTestError) Error() string { return "Test Error String" } func MyTestFunc() error { var err *MyTestError err = err // let's do something with the variable to avoid compiling error return nil } func main() { err := MyTestFunc() if err != nil { fmt.Println("An error has occurred: ", err) fmt.Println("Type of err: ", reflect.TypeOf(err)) return } fmt.Println("Success!") }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Running the code in the &lt;a href="https://go.dev/play/p/pHjClQDDhWw"&gt;Go Playground &lt;/a&gt;we now get the following output:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;Success!&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Three cases to keep in mind&lt;/h2&gt; &lt;p&gt;Reusing error variables and returning custom error structures is a widespread practice, and there isn't anything wrong with that. However, you should keep the form of the returned error in mind when checking it for a &lt;code&gt;nil&lt;/code&gt; value:&lt;/p&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;If you control the source code of the called function, ensure it returns an &lt;code&gt;error&lt;/code&gt; interface and always returns a naked &lt;code&gt;nil&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the function you call returns a concrete object, use a dedicated variable to store that function error.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;In all the other cases, if you see weird behaviour where Go says that a &lt;code&gt;nil&lt;/code&gt; variable is &lt;code&gt;not nil&lt;/code&gt;, you can always use the &lt;code&gt;reflect&lt;/code&gt; package to check the value specifically:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;reflect.ValueOf(err).IsNil()&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;I hope this has expanded your knowledge of the Go language. Please leave a comment below if you have questions about this article. As always, we welcome your feedback.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/10/17/fix-issues-reusing-go-error-variables" title="How to fix issues caused by reusing Go error variables"&gt;How to fix issues caused by reusing Go error variables&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Massimiliano Ziccardi</dc:creator><dc:date>2022-10-17T07:00:00Z</dc:date></entry><entry><title>Advanced regex: Capture groups, lookaheads, and lookbehinds</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/10/13/advanced-regex-capture-groups-lookaheads-and-lookbehinds" /><author><name>Bob Reselman</name></author><id>e15fa60e-48f3-4749-872e-ee0929ab2dd5</id><updated>2022-10-13T07:00:00Z</updated><published>2022-10-13T07:00:00Z</published><summary type="html">&lt;p&gt;Capture groups, lookaheads, and lookbehinds provide a powerful way to filter and retrieve data according to advanced regular expression matching logic. This article explains capture groups, lookaheads, and lookbehinds, along with the fundamental syntax you need to know in order to write them.&lt;/p&gt; &lt;p&gt;This is the fourth article in a series about regular expressions:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Part 1: &lt;a href="https://developers.redhat.com/articles/2022/09/14/beginners-guide-regular-expressions-grep"&gt;A beginner’s guide to regular expressions with grep&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 2: &lt;a href="https://developers.redhat.com/articles/2022/09/16/regex-how-quantifiers-pattern-collections-and-word-boundaries"&gt;Regex how-to: Quantifiers, pattern collections, and word boundaries&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3: &lt;a href="https://developers.redhat.com/articles/2022/10/05/filter-content-html-using-regular-expressions-grep"&gt;Filter content in HTML using regular expressions in grep&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;In those articles, you learned about regular characters, metacharacters, quantifiers, pattern collections, and word groups. This article builds on those concepts. As in the previous articles in the series, the sample commands here execute regular expressions by piping string output from an &lt;code&gt;echo&lt;/code&gt; command to the &lt;code&gt;grep&lt;/code&gt; utility. The &lt;code&gt;grep&lt;/code&gt; utility uses a regular expression to filter content. The benefit of demonstrating regular expressions using &lt;code&gt;grep&lt;/code&gt; is that you don't need to set up any special programming environment. You can execute an example immediately by copying and pasting the code directly into your computer's terminal window running under &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Capture groups&lt;/h2&gt; &lt;p&gt;A &lt;em&gt;capture group,&lt;/em&gt; as the name implies, is a regular expression that matches and returns groups of characters according to a pattern. The regular expression logic for a capture group is written between opening and closing parentheses. For example:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;(...)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This capture group represents the following logic: &lt;em&gt;Match any of the characters in a string and return the matches in groups of three characters&lt;/em&gt;. (Remember, the metacharacter &lt;code&gt;.&lt;/code&gt; means &lt;em&gt;any character&lt;/em&gt;.) Consider the following command set, which is an &lt;code&gt;echo&lt;/code&gt; command that pipes a string to a &lt;code&gt;grep&lt;/code&gt; command that executes the regular expression:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "abcdef" | grep -Po '(...)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The commands shown above return the following result:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;abc def&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following regular expression returns capture groups in which each group is made up of three numeric characters. The regular expression uses the &lt;code&gt;\d&lt;/code&gt; metacharacters, which indicate&lt;em&gt; any numeric digit&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;(\d\d\d)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, we feed a string to &lt;code&gt;grep&lt;/code&gt; that executes the regular expression like so:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "My telephone number is 212 271 0897" | grep -Po '(\d\d\d)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The command returns the following output:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;212 271 089&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following capture group matches and groups together any 12 characters in a string of text. In this case, the text is a snippet of HTML echoed like so:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;John Lennon&lt;/div&gt; and &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/p&gt;" |grep -Po '(...........)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The regular expression returns the following output:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;&lt;p&gt;&lt;div&gt;Joh n Lennon&lt;/d iv&gt; and &lt;di v&gt;Mick Jagg er&lt;/div&gt;&lt;/p&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following example matches and groups any 11 regular characters that occur between a set of HTML &lt;code&gt;&lt;div&gt;&lt;/div&gt;&lt;/code&gt; tags in the echoed string.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;John Lennon&lt;/div&gt; and &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/p&gt;" |grep -Po '(&lt;div&gt;...........&lt;/div&gt;)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output is:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;&lt;div&gt;John Lennon&lt;/div&gt; &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following example uses the quantifier metacharacters &lt;code&gt;{}&lt;/code&gt; to declare a regular expression that has the following logic: &lt;em&gt;Match occurrences of any 11 characters that appear between a set of HTML &lt;code&gt;&lt;div&gt;&lt;/div&gt;&lt;/code&gt; tags&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;John Lennon&lt;/div&gt; and &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/p&gt;" |grep -Po '(&lt;div&gt;.{11}&lt;/div&gt;)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Result:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;&lt;div&gt;John Lennon&lt;/div&gt; &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following regular expression uses the &lt;code&gt;\w&lt;/code&gt; metacharacters to capture a group starting with the character &lt;code&gt;J&lt;/code&gt; and followed by zero or more word characters. (A &lt;em&gt;word character&lt;/em&gt; is an uppercase or lowercase letter, a numeric character, or the underscore character. Other punctuation and white space characters are &lt;em&gt;not&lt;/em&gt; word characters. Thus, matching stops when it encounters a space character or the &lt;code&gt;&lt;&lt;/code&gt; in &lt;code&gt;&lt;/div&gt;&lt;/code&gt;.)&lt;/p&gt; &lt;p&gt;Remember, the &lt;code&gt;*&lt;/code&gt; metacharacter means: &lt;em&gt;Find zero or more of the preceding character&lt;/em&gt;. In this case, the expression &lt;code&gt;\w*&lt;/code&gt; means: &lt;em&gt;Find zero or more word characters&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;John Lennon&lt;/div&gt; and &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/p&gt;" |grep -Po '(J\w*)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output is:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;John Jagger&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following regular expression uses the &lt;code&gt;\w&lt;/code&gt; metacharacters to capture occurrences of the character &lt;code&gt;J&lt;/code&gt; followed by zero or more word characters, which are then followed by a space character. Finally, the regular expression captures a set of characters that match text in which the uppercase &lt;code&gt;L&lt;/code&gt; character is followed by zero or more word characters. A set of characters that match the logic is returned as a capture group.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;John Lennon&lt;/div&gt; and &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/p&gt;" |grep -Po '(J\w*\sL\w*)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output is:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;John Lennon&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following regular expression is similar to the previous one. The difference in this example is that the pattern declaration captures the groups with words that begin with uppercase &lt;code&gt;M&lt;/code&gt;, followed by a space character, and then words that begin with uppercase &lt;code&gt;J&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;John Lennon&lt;/div&gt; and &lt;div&gt;Mick Jagger&lt;/div&gt;&lt;/p&gt;" |grep -Po '(M\w*\sJ\w*)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output is:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;Mick Jagger&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following regular expression declares a capture group that executes the following logic: &lt;em&gt;Process the text from the file named &lt;code&gt;regex-content-01.html&lt;/code&gt;. Find a group of characters that start with the regular characters &lt;code&gt;bgcolor="&lt;/code&gt; followed by any character one or more times, but stop after encountering the first &lt;code&gt;"&lt;/code&gt; character.&lt;/em&gt; The extra &lt;code&gt;?&lt;/code&gt; after the &lt;code&gt;*&lt;/code&gt; character makes sure that the capture group stops the first time it encounters the terminating &lt;code&gt;"&lt;/code&gt; character, and doesn't look for more such characters in the line.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ cat regex-content-01.html | grep -Po '(bgcolor=".*?")'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The result is:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;bgcolor="#ffffff"&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following regular expression builds on the previous one. But it adds "or" logic as follows: &lt;em&gt;Process the text from the file named &lt;code&gt;regex-content-01.html&lt;/code&gt;. Find a group of characters that either start with the regular characters &lt;code&gt;bgcolor="&lt;/code&gt; followed by any character zero or more times and end with a &lt;code&gt;"&lt;/code&gt; character, or start with the regular characters &lt;code&gt;text="&lt;/code&gt; followed by any character zero or more times and end with a &lt;code&gt;"&lt;/code&gt; character:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ cat regex-content-01.html | grep -Po '(bgcolor=".*?")|(text=".*?")'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The result of executing the regular expression is:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;bgcolor="#ffffff" text="#000000"&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Working with lookaheads and lookbehinds&lt;/h2&gt; &lt;p&gt;&lt;em&gt;Lookaheads&lt;/em&gt; and &lt;em&gt;lookbehinds&lt;/em&gt; are types of capture groups that traverse text until a certain pattern occurs. A lookahead traverses the string from the beginning of the line. A lookbehind traverses a line from its end.&lt;/p&gt; &lt;p&gt;The metacharacters that indicate a lookahead are: &lt;code&gt;?=&lt;/code&gt; . The metacharacters that indicate a lookbehind are: &lt;code&gt;?=&lt;&lt;/code&gt; .&lt;/p&gt; &lt;p&gt;Lookaheads and lookbehinds don't include the matching pattern that defines their boundary.&lt;/p&gt; &lt;p&gt;Figure 1 below shows a visual analysis of lookaheads and lookbehinds that are applied to the string: &lt;code&gt;&lt;p&gt;&lt;div&gt;Cat&lt;/div&gt;&lt;/p&gt;&lt;/code&gt;.&lt;/p&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="align-center media media--type-image media--view-mode-article-content"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/fig1_17.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_floated/public/fig1_17.png?itok=pw7JQBlM" width="442" height="181" alt="Examples of regular expression capture groups using positive and negative lookbehinds." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Examples of regular expression capture groups using positive and negative lookbehinds. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;p&gt;An important thing to understand about the boundary pattern in lookaheads and lookbehinds is that the boundary is determined according to the entirety of the declared pattern not by the order of the characters in the pattern. This is particularly important when considering a lookbehind.&lt;/p&gt; &lt;p&gt;For example, in the lookbehind regular expression &lt;code&gt;(?&lt;=&lt;p&gt;)&lt;/code&gt;, the regex engine is looking backward for a complete occurrence of the pattern &lt;code&gt;&lt;p&gt;&lt;/code&gt; as read from left to right. It is &lt;em&gt;not&lt;/em&gt; looking backward, reading from right to left, processing each character in the pattern as &lt;code&gt;&gt;&lt;/code&gt; followed by &lt;code&gt;p&lt;/code&gt; followed by &lt;code&gt;&lt;&lt;/code&gt;. This is a subtle distinction to keep in mind when thinking about the mechanics of how the regex engine processes lookaheads and lookbehinds.&lt;/p&gt; &lt;p&gt;Now, let's move ahead and examine the details of lookaheads and lookbehinds as illustrated in Figure 1.&lt;/p&gt; &lt;h3&gt;Lookahead&lt;/h3&gt; &lt;p&gt;As mentioned above, a lookahead is one in which a capture group is created by traversing text starting from the beginning of a text until a matching pattern that indicates a capture boundary is encountered.&lt;/p&gt; &lt;p&gt;Consider this regular expression:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;.*(?=&lt;\/p&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This expression declares the following logic: &lt;em&gt;Starting at the beginning of text, match any characters one or many times until you encounter the characters &lt;code&gt;&lt;\/p&gt;&lt;/code&gt;.&lt;/em&gt; (The regular character &lt;code&gt;/&lt;/code&gt; is escaped by putting the regular expression escape system &lt;code&gt;\&lt;/code&gt; before it. This is the equivalent of saying &lt;em&gt;search for the HTML tag &lt;code&gt;&lt;/p&gt;&lt;/code&gt;.&lt;/em&gt; But, since the &lt;code&gt;/&lt;/code&gt; character is a reserved character under regular expression syntax, the &lt;code&gt;\&lt;/code&gt; escape character must precede the &lt;code&gt;/&lt;/code&gt; regular character in order to not have it treated as a reserve character.)&lt;/p&gt; &lt;p&gt;The following is an example of executing a lookahead against the string &lt;code&gt;&lt;p&gt;&lt;div&gt;Cat&lt;/div&gt;&lt;/p&gt;&lt;/code&gt; using the echo command and piping the result to &lt;code&gt;grep&lt;/code&gt; like so:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;Cat&lt;/div&gt;&lt;/p&gt;" | grep -Po '.*(?=&lt;\/p&gt;)'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The regular expression produces the following result:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;&lt;p&gt;&lt;div&gt;Cat&lt;/div&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice that the result is a capture group that includes all characters except &lt;code&gt;&lt;/p&gt;&lt;/code&gt;. The &lt;code&gt;&lt;/p&gt;&lt;/code&gt; HTML tag is the lookahead boundary.&lt;/p&gt; &lt;p&gt;Next, let's look at using a lookbehind.&lt;/p&gt; &lt;h3&gt;Lookbehind&lt;/h3&gt; &lt;p&gt;As mentioned above, a lookbehind is one in which a capture group is created by traversing text starting from the end of the content, moving backward until a boundary pattern is encountered.&lt;/p&gt; &lt;p&gt;The metacharacters that indicate a lookbehind are: &lt;code&gt;?&lt;=&lt;/code&gt;. These characters are used within the open and close parentheses as is typical for defining a capture group.&lt;/p&gt; &lt;p&gt;The following lookbehind regular expression: &lt;code&gt;(?&lt;=&lt;p&gt;).*&lt;/code&gt; describes the following logic: &lt;em&gt;Starting at the end of content being processed by the regular expression, traverse the text backward until the regular characters &lt;code&gt;&lt;p&gt;&lt;/code&gt; are encountered. Return the matching text, but do not return the lookbehind boundary.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The following example executes a lookbehind using the &lt;code&gt;echo&lt;/code&gt; command and then piping the result to &lt;code&gt;grep&lt;/code&gt;. The grep command is configured to filter according to a regular expression.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ echo "&lt;p&gt;&lt;div&gt;Cat&lt;/div&gt;&lt;/p&gt;" | grep -Po '(?&lt;=&lt;p&gt;).*'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The result is:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;&lt;div&gt;Cat&lt;/div&gt;&lt;/p&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Notice that the characters &lt;code&gt;&lt;p&gt;&lt;/code&gt; are excluded from the capture group returned by the lookbehind. This is to be expected.&lt;/p&gt; &lt;h2&gt;Putting it all together&lt;/h2&gt; &lt;p&gt;Capture groups, lookaheads, and lookbehinds add a new dimension to using regular expressions to filter data. However, they can be tricky to learn. It can take a while to get comfortable with the regular expression syntax for capture groups, lookaheads and lookbehinds. Understanding the nuances of the processing logic can take time too. But the time investment is worth it. You'll be able to use regular expressions in a more concise, more elegant, and much more powerful manner.&lt;/p&gt; &lt;p&gt;Hopefully the examples shown in the article and the others in this series provide a solid foundation from which you can continue in your mastery of regular expressions.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/10/13/advanced-regex-capture-groups-lookaheads-and-lookbehinds" title="Advanced regex: Capture groups, lookaheads, and lookbehinds"&gt;Advanced regex: Capture groups, lookaheads, and lookbehinds&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Bob Reselman</dc:creator><dc:date>2022-10-13T07:00:00Z</dc:date></entry><entry><title type="html">Byteman 4.0.20 has been released</title><link rel="alternate" href="http://bytemanblog.blogspot.com/2022/10/byteman-4020-has-been-released.html" /><author><name>Andrew Dinn</name></author><id>http://bytemanblog.blogspot.com/2022/10/byteman-4020-has-been-released.html</id><updated>2022-10-12T10:37:00Z</updated><content type="html">  Byteman 4.0.20 is now available from the and from the . It is the latest update release for use on all JDK9+ runtimes up to and including JDK20.   Byteman 4.0.20 is a maintenance release which enables Byteman to be used with JDK20 releases. It also contains two small bug fixes. More details are provided in the and the latest .</content><dc:creator>Andrew Dinn</dc:creator></entry><entry><title>How to easily generate Helm charts using Dekorate</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/10/12/generate-helm-charts-using-dekorate" /><author><name>Jose Carvajal Hilario, Charles Moulliard</name></author><id>6c9b52a7-8e74-41ac-ae1d-289cec072fc0</id><updated>2022-10-12T07:00:00Z</updated><published>2022-10-12T07:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt; is the most popular package manager that finds, shares, and deploys software built for Kubernetes. It would be best if you packaged &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; applications as Helm charts containing all of the necessary metadata and resource definitions to configure them for distribution through Helm. This article introduces the &lt;a href="https://dekorate.io/docs/helm"&gt;Dekorate Helm&lt;/a&gt; extension as an easier way to generate and maintain Helm chart resources.&lt;/p&gt; &lt;h2&gt;What are Helm charts?&lt;/h2&gt; &lt;p&gt;A Helm chart is a collection of files inside a directory. The following files are mandatory:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;Chart.yaml&lt;/code&gt;: Chart metadata, such as name, version, and developers.&lt;/li&gt; &lt;li&gt;&lt;code&gt;values.yaml&lt;/code&gt;: Default configuration values for the chart in YAML.&lt;/li&gt; &lt;li&gt;&lt;code&gt;templates&lt;/code&gt;: A directory containing the list of resources that, combined with &lt;code&gt;values.yaml&lt;/code&gt;, generate the application when the chart is installed. The resources are also specified in YAML.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;How to configure the Dekorate Helm extension&lt;/h2&gt; &lt;p&gt;Dekorate (starting with version 2.11) can generate the Helm chart resources for you. You should include the Dekorate Helm dependency in your POM file using the latest version of Dekorate from &lt;a href="https://search.maven.org/search?q=a:helm-annotations%20AND%20g:io.dekorate"&gt;Maven Central&lt;/a&gt; as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class="xml"&gt;&lt;dependency&gt; &lt;groupId&gt;io.dekorate&lt;/groupId&gt; &lt;artifactId&gt;helm-annotations&lt;/artifactId&gt; &lt;version&gt;{dekorate.version}&lt;/version&gt; &lt;/dependency&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then, configure Helm via properties as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# This name property is mandatory to generate the Helm chart dekorate.helm.name=myChart # If the version is not provided, the application version will be used instead dekorate.helm.version=1.0.0-SNAPSHOT # The description property is optional dekorate.helm.description=Description of my Chart &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively, add the &lt;code&gt;@HelmChart&lt;/code&gt; annotation to one of your Java source files:&lt;/p&gt; &lt;pre&gt;&lt;code class="java"&gt;@HelmChart(name = "myChart", version = "1.0.0-SNAPSHOT", description = "Description of my Chart") @SpringBootApplication public class Main { public static void main(String[] args) { SpringApplication.run(Main.class, args); } } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can generate the Helm resources using the Maven build command:&lt;/p&gt; &lt;pre&gt;&lt;code class="bash"&gt;$ mvn clean package &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The generated Helm chart will be in the &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/&lt;/code&gt; directory.&lt;/p&gt; &lt;p&gt;Dekorate extensions determine which templates appear in the chart. For example, if your project uses the &lt;a href="https://dekorate.io/docs/kubernetes"&gt;Kubernetes Dekorate&lt;/a&gt; extension, the Helm resources include the following files in the &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/templates&lt;/code&gt; directory:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;code&gt;deployment.yaml&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;ingress.yaml&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;service.yaml&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;How to use Helm&lt;/h2&gt; &lt;p&gt;Let's see how to use the previously generated Helm chart.&lt;/p&gt; &lt;p&gt;First, make sure you have installed the &lt;a href="https://helm.sh/docs/intro/install/"&gt;Helm command-line interface&lt;/a&gt; (CLI) and logged into a Kubernetes cluster.&lt;/p&gt; &lt;p&gt;Then run the following Maven command to generate the Helm artifacts:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ mvn clean package &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, install the generated Helm chart into the cluster:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ helm install helm-example ./target/classes/META-INF/dekorate/helm/&lt;chart name&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;helm&lt;/code&gt; command waits until the chart is fully installed and the application is up and running.&lt;/p&gt; &lt;h3&gt;2 ways to update your deployment&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Method #1:&lt;/strong&gt; Update deployment via the &lt;code&gt;upgrade&lt;/code&gt; option of the Helm command line. After making changes to your project, regenerate the resources using this Maven command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ mvn clean package &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then upgrade your deployment:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ helm upgrade helm-example ./target/classes/META-INF/dekorate/helm/&lt;chart name&gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Method #2:&lt;/strong&gt; Update a deployment through the &lt;code&gt;--set&lt;/code&gt; option of the &lt;code&gt;helm upgrade&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ helm upgrade helm-example ./target/classes/META-INF/dekorate/helm/&lt;chart name&gt; --set app.replicas=1 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;app.replicas&lt;/code&gt; option is a parameterized property mapped by the &lt;code&gt;values.yaml&lt;/code&gt; file. We will explore this function more in the next section.&lt;/p&gt; &lt;p&gt;To delete a deployment, enter:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ helm uninstall helm-example &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Mapping values using path expressions&lt;/h2&gt; &lt;p&gt;Helm allows &lt;em&gt;mapping&lt;/em&gt; to set properties of your resources during or after chart installation. For instance, suppose your deployment template in the &lt;code&gt;templates/deployment.yaml&lt;/code&gt; file looks like this:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: apps/v1 kind: Deployment metadata: name: myModule spec: replicas: {{ .Values.app.replicas }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;helm&lt;/code&gt; command to set the number of replicas to use for installing the chart, as shown in the previous section:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ helm install helm-example ./target/classes/META-INF/dekorate/helm/&lt;chart name&gt; --set app.replicas=1 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Alternatively, set the number of the replicas in the &lt;code&gt;values.yaml&lt;/code&gt; file, located in the chart's directory at &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/values.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;app: replicas: 1 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The good news is that Dekorate also generates the Helm &lt;code&gt;values.yaml&lt;/code&gt; file and automatically maps preconfigured properties, such as Kubernetes replicas or ingress host properties. The complete list of preconfigured properties is in the &lt;a href="https://dekorate.io/docs/helm#mapping-values"&gt;official Dekorate Helm site&lt;/a&gt; documentation.&lt;/p&gt; &lt;p&gt;Let's try an example of configuring the replicas using the Dekorate Kubernetes &lt;code&gt;dekorate.kubernetes.replicas&lt;/code&gt; property. This example will demonstrate how Dekorate Helm automatically maps it into the generated Helm chart.&lt;/p&gt; &lt;p&gt;Set 3 replicas for your deployment:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# Set replicas to 3 dekorate.kubernetes.replicas=3 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The generated Helm values file at &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/values.yaml&lt;/code&gt; contain the &lt;code&gt;replicas&lt;/code&gt; value:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;--- app: replicas: 3 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Additionally, the deployment template file at &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/templates/deployment.yaml&lt;/code&gt; will have a reference to this value.&lt;/p&gt; &lt;p&gt;What if you want to map other properties that are not preconfigured? For example, mapping the value &lt;code&gt;myModule&lt;/code&gt; that appears in the &lt;code&gt;metadata.name&lt;/code&gt; property with the following deployment template file:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: apps/v1 kind: Deployment metadata: name: myModule -- let's map this value! spec: replicas: {{ .Values.app.replicas }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can configure Dekorate to map any properties in your resources using &lt;a href="https://github.com/yaml-path/YamlPath"&gt;YAMLPath expressions&lt;/a&gt;. To continue with the preceding example, you need only add the following configuration to your properties:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;dekorate.helm.values[0].property=resource dekorate.helm.values[0].paths=metadata.name &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the first line, &lt;code&gt;property&lt;/code&gt; is the property name to be set. In the second line, &lt;code&gt;paths&lt;/code&gt; is a list of YAMLPath expressions that identify the properties you want to use (&lt;code&gt;metadata.name&lt;/code&gt; in the example).&lt;/p&gt; &lt;p&gt;Using the properties just defined, the resulting Helm values file at &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/values.yaml&lt;/code&gt; will include:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;app: resource: myModule &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following is the deployment template resource at &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/templates/deployment.yaml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class="yaml"&gt;apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.app.resource }} spec: replicas: {{ .Values.app.replicas }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;YAMLPath expressions also support more complex scenarios. You can use the expressions to replace properties for a specific resource type or properties described as a key-value map. You can find all the supported features in the &lt;a href="https://dekorate.io/docs/helm#mapping-user-properties-using-path-expressions"&gt;official site documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;How to use Helm profiles&lt;/h2&gt; &lt;p&gt;All properties are, by default, mapped to the same Helm &lt;code&gt;values.yaml&lt;/code&gt; file. However, Dekorate also supports the generation of other Helm values files.&lt;/p&gt; &lt;p&gt;For example, let’s say you have two environments: one for testing and another for production. Each environment has a different ingress host that exposes your Kubernetes application. You can configure your application as follows:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;# Mapped to `values.yaml` by the preconfigured Ingress decorator dekorate.kubernetes.ingress.host=my-host # Overwrite the value of `dekorate.kubernetes.ingress.host` to `values-&lt;profile-name&gt;.yaml`: dekorate.helm.values[0].property=host dekorate.helm.values[0].paths=(kind == Ingress).spec.rules.host dekorate.helm.values[0].value=my-test-host ## `test` is the profile name. dekorate.helm.values[0].profile=test &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Dekorate Helm preconfigures the &lt;code&gt;Ingress&lt;/code&gt; host property. Therefore, you will find the &lt;code&gt;my-host&lt;/code&gt; value in the &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/values.yaml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;app: host: my-host &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But because you are also using a profile named &lt;code&gt;test&lt;/code&gt; in one of your properties, Dekorate generates a &lt;code&gt;target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/values-test.yaml&lt;/code&gt; file with this content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;app: host: my-test-host &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When installing your chart in the test environment, you can use this values file in the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ helm install -f ./target/classes/META-INF/dekorate/helm/&lt;chart name&gt;/values-test.yaml helm-example ./target/classes/META-INF/dekorate/helm/&lt;chart name&gt; &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Dekorate reduces the complexity of Helm chart generation&lt;/h2&gt; &lt;p&gt;Generating Helm charts can be a complex process. In this article, we demonstrated three Helm processes that illustrate how Dekorate simplifies Helm chart generation:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;p&gt;How to easily generate Helm charts using Dekorate.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How to map properties to be set when installing or updating your charts.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;How to use Helm profiles.&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Learn more about Helm charts in the &lt;a href="https://helm.sh/docs/topics/charts/"&gt;official Helm documentation&lt;/a&gt;.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/10/12/generate-helm-charts-using-dekorate" title="How to easily generate Helm charts using Dekorate"&gt;How to easily generate Helm charts using Dekorate&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Jose Carvajal Hilario, Charles Moulliard</dc:creator><dc:date>2022-10-12T07:00:00Z</dc:date></entry><entry><title>Quarkus 2.13.2.Final released - Maintenance release</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-2-13-2-final-released/&#xA;            " /><author><name>Guillaume Smet (https://twitter.com/gsmet_)</name></author><id>https://quarkus.io/blog/quarkus-2-13-2-final-released/</id><updated>2022-10-12T00:00:00Z</updated><published>2022-10-12T00:00:00Z</published><summary type="html">2.13.2.Final is the second maintenance release of the 2.13 release train. As usual, it contains bugfixes and documentation improvements. It is a recommended and safe upgrade for anyone already using 2.13. If you are not already using 2.13, please refer to our migration guide. Full changelog You can get the...</summary><dc:creator>Guillaume Smet (https://twitter.com/gsmet_)</dc:creator><dc:date>2022-10-12T00:00:00Z</dc:date></entry><entry><title>File-based Kafka Connect scenarios with end-to-end encryption</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/10/11/file-based-kafka-connect-scenarios-end-end-encryption" /><author><name>Hans-Peter Grahsl</name></author><id>690bf52f-bdb5-437c-93a7-5ba68d872b17</id><updated>2022-10-11T07:00:00Z</updated><published>2022-10-11T07:00:00Z</published><summary type="html">&lt;p&gt;The &lt;a href="https://developers.redhat.com/articles/2022/05/09/client-side-end-end-data-encryption-apache-kafka"&gt;first article in this series&lt;/a&gt; explained the need for client-side, end-to-end encryption for data passing through &lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;. The article also introduced the &lt;a href="https://github.com/hpgrahsl/kryptonite-for-kafka"&gt;Kryptonite for Kafka&lt;/a&gt; project, which integrates with &lt;a href="https://kafka.apache.org/documentation/#connect"&gt;Apache Kafka Connect&lt;/a&gt; to achieve automatic encryption and decryption with no changes to application code.&lt;/p&gt; &lt;p&gt;This article, the second and last in this series, contains more advanced examples that cover a common scenario: File-based data integration between different kinds of storage. I'll show Kryptonite for Kafka features that support fine-grained, field-level encryption in this use case.&lt;/p&gt; &lt;p&gt;To keep things simple in the examples, a local file system serves as the source while the sink is set up in &lt;a href="https://github.com/minio/"&gt;MinIO&lt;/a&gt; (Figure 1), an open source object storage service compatible with &lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt;.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/05_use_case_2_overview.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/05_use_case_2_overview.png?itok=VIxVakFd" width="1440" height="812" alt="Kafka Connect encrypts data passed in from a file and decrypts data just before passing it to MinIO." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Kafka Connect encrypts data passed in from a file and decrypts data just before passing it to MinIO. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;As in the previous article, the aim is to secure selected fields of records, this time in JSON files that are transferred between the two storage systems using Kafka Connect. Along the way, the article introduces new features of the custom single message transform (SMT).&lt;/p&gt; &lt;h2&gt;A complex data structure&lt;/h2&gt; &lt;p&gt;The local file system holds a sample text file containing a bunch of JSON objects that store different kinds of personal data for fictional characters. The JSON objects are serialized line by line into this file. In contrast to the flat structure of tabular data in the previous article, the data in this article contains complex field types. One such JSON object, for the &lt;code&gt;personal&lt;/code&gt; field and its embedded &lt;code&gt;knownResidences&lt;/code&gt; field, looks like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-json5"&gt;{ &lt;span class="hljs-string"&gt;"guid": &lt;span class="hljs-string"&gt;"837abb22-3e56-426b-8748-90d2ce4b1e5c", &lt;span class="hljs-string"&gt;"personal": { &lt;span class="hljs-string"&gt;"firstname": &lt;span class="hljs-string"&gt;"Judy", &lt;span class="hljs-string"&gt;"lastname": &lt;span class="hljs-string"&gt;"Hayes", &lt;span class="hljs-string"&gt;"age": &lt;span class="hljs-number"&gt;38, &lt;span class="hljs-string"&gt;"gender": &lt;span class="hljs-string"&gt;"female", &lt;span class="hljs-string"&gt;"height": &lt;span class="hljs-number"&gt;167, &lt;span class="hljs-string"&gt;"weight": &lt;span class="hljs-number"&gt;50, &lt;span class="hljs-string"&gt;"eyeColor": &lt;span class="hljs-string"&gt;"brown" }, &lt;span class="hljs-string"&gt;"knownResidences": [ &lt;span class="hljs-string"&gt;"529 Glenmore Avenue, Waumandee, Connecticut, 8220", &lt;span class="hljs-string"&gt;"489 Lake Street, Glasgow, Tennessee, 1469", &lt;span class="hljs-string"&gt;"927 Rutledge Street, Fresno, Pennsylvania, 5610", &lt;span class="hljs-string"&gt;"728 Debevoise Street, Gerton, Federated States Of Micronesia, 7007" ], &lt;span class="hljs-string"&gt;"isActive": &lt;span class="hljs-literal"&gt;true, &lt;span class="hljs-string"&gt;"profilePic": &lt;span class="hljs-string"&gt;"https://picsum.photos/128", &lt;span class="hljs-string"&gt;"registered": &lt;span class="hljs-string"&gt;"2018-08-12T01:58:44 -02:00" } &lt;span class="hljs-comment"&gt;/* ... */ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To store all these JSON objects from the file into a Kafka topic, the example adopts a simple-but-good-enough approach, employing the &lt;code&gt;FileStreamSourceConnector&lt;/code&gt; that ships with Apache Kafka Connect.&lt;/p&gt; &lt;p&gt;Suppose that both complex fields, &lt;code&gt;personal&lt;/code&gt; (a field with nested objects) and &lt;code&gt;knownResidences&lt;/code&gt; (an array) must be protected by encrypting their contents. I'll show two ways to process such complex fields:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Encrypt the field as a whole.&lt;/li&gt; &lt;li&gt;Individually encrypt each value for each nested field in the &lt;code&gt;personal&lt;/code&gt; field and each individual array element in the &lt;code&gt;knownResidences&lt;/code&gt; field.&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="-encryption-with-field-mode-object-"&gt;Encryption as a whole with the OBJECT field mode&lt;/h2&gt; &lt;p&gt;Let's first investigate the encryption of complex field types as a whole. For this, the source connector configuration could be something like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-json5"&gt;{ &lt;span class="hljs-attr"&gt;"name": &lt;span class="hljs-string"&gt;"filesource-enc-001", &lt;span class="hljs-attr"&gt;"config": { &lt;span class="hljs-attr"&gt;"connector.class":&lt;span class="hljs-string"&gt;"org.apache.kafka.connect.file.FileStreamSourceConnector", &lt;span class="hljs-attr"&gt;"value.converter": &lt;span class="hljs-string"&gt;"org.apache.kafka.connect.json.JsonConverter", &lt;span class="hljs-attr"&gt;"value.converter.schemas.enable": &lt;span class="hljs-literal"&gt;false, &lt;span class="hljs-attr"&gt;"key.converter": &lt;span class="hljs-string"&gt;"org.apache.kafka.connect.json.JsonConverter", &lt;span class="hljs-attr"&gt;"key.converter.schemas.enable": &lt;span class="hljs-literal"&gt;false, &lt;span class="hljs-attr"&gt;"file":&lt;span class="hljs-string"&gt;"/tmp/kafka-connect/data/sample_data.txt", &lt;span class="hljs-attr"&gt;"topic":&lt;span class="hljs-string"&gt;"personal-data-enc", &lt;span class="hljs-attr"&gt;"transforms":&lt;span class="hljs-string"&gt;"string2json,cipher", &lt;span class="hljs-attr"&gt;"transforms.string2json.type": &lt;span class="hljs-string"&gt;"com.github.hpgrahsl.kafka.connect.transforms.kryptonite.util.JsonStringReader$Value", &lt;span class="hljs-attr"&gt;"transforms.cipher.type": &lt;span class="hljs-string"&gt;"com.github.hpgrahsl.kafka.connect.transforms.kryptonite.CipherField$Value", &lt;span class="hljs-attr"&gt;"transforms.cipher.cipher_mode": &lt;span class="hljs-string"&gt;"ENCRYPT", &lt;span class="hljs-attr"&gt;"transforms.cipher.cipher_data_keys": &lt;span class="hljs-string"&gt;"${file:/secrets/classified.properties:cipher_data_keys}", &lt;span class="hljs-attr"&gt;"transforms.cipher.cipher_data_key_identifier": &lt;span class="hljs-string"&gt;"my-demo-secret-key-123", &lt;span class="hljs-attr"&gt;"transforms.cipher.field_config": &lt;span class="hljs-string"&gt;"[{\"name\":\"personal\"},{\"name\":\"knownResidences\",\"keyId\":\"my-demo-secret-key-987\"}]", &lt;span class="hljs-attr"&gt;"transforms.cipher.field_mode": &lt;span class="hljs-string"&gt;"OBJECT" } } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The SMT's configuration is defined by the &lt;code&gt;transform.cipher.*&lt;/code&gt; properties as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Operate on the records' values (&lt;code&gt;type: "CipherField$Value"&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Encrypt data (&lt;code&gt;cipher_mode: "ENCRYPT"&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Load the secret key material from an external key file (&lt;code&gt;cipher_data_keys: "${file:/secrets/classified.properties:cipher_data_keys}&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Use a specific secret key based on its ID (&lt;code&gt;cipher_data_key_identifier: "my-demo-secret-key-123"&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Process only selected fields, for which different &lt;code&gt;keyId&lt;/code&gt;s can be provided. If no &lt;code&gt;keyId&lt;/code&gt; is given for a specific field, use the general &lt;code&gt;keyId&lt;/code&gt; defined in the &lt;code&gt;cipher_data_key_identifier&lt;/code&gt; property (&lt;code&gt;field_config: "[{\"name\":\"personal\"},{\"name\":\"knownResidences\",\"keyId\":\"my-demo-secret-key-987\"}]&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Encrypt complex fields (with nested objects or arrays) as a whole (&lt;code&gt;"transforms.cipher.field_mode": "OBJECT"&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;At runtime, all configured &lt;code&gt;keyId&lt;/code&gt; instances specified in the &lt;code&gt;field_config&lt;/code&gt; settings need to be resolved. For the configuration just shown, each field is encrypted with either the general key (&lt;code&gt;keyId=my-demo-secret-key-123&lt;/code&gt;) or a specially chosen one (&lt;code&gt;keyId=my-demo-secret-key-987&lt;/code&gt;), both of which must be given in the external properties file named &lt;code&gt;classified.properties&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-properties"&gt;cipher_data_keys=[{ &lt;span class="hljs-string"&gt;"identifier": &lt;span class="hljs-string"&gt;"my-demo-secret-key-123", &lt;span class="hljs-string"&gt;"material": { &lt;span class="hljs-string"&gt;"primaryKeyId": &lt;span class="hljs-number"&gt;1000000001, &lt;span class="hljs-string"&gt;"key": [ { &lt;span class="hljs-string"&gt;"keyData": { &lt;span class="hljs-string"&gt;"typeUrl": &lt;span class="hljs-string"&gt;"type.googleapis.com/google.crypto.tink.AesGcmKey", &lt;span class="hljs-string"&gt;"value": &lt;span class="hljs-string"&gt;"GhDRulECKAC8/19NMXDjeCjK", &lt;span class="hljs-string"&gt;"keyMaterialType": &lt;span class="hljs-string"&gt;"SYMMETRIC" }, &lt;span class="hljs-string"&gt;"status": &lt;span class="hljs-string"&gt;"ENABLED", &lt;span class="hljs-string"&gt;"keyId": &lt;span class="hljs-number"&gt;1000000001, &lt;span class="hljs-string"&gt;"outputPrefixType": &lt;span class="hljs-string"&gt;"TINK" } ] } } ,{ &lt;span class="hljs-string"&gt;"identifier": &lt;span class="hljs-string"&gt;"my-demo-secret-key-987", &lt;span class="hljs-string"&gt;"material": { &lt;span class="hljs-string"&gt;"primaryKeyId": &lt;span class="hljs-number"&gt;1000000002, &lt;span class="hljs-string"&gt;"key": [ {&lt;span class="hljs-string"&gt;"keyData":{ &lt;span class="hljs-string"&gt;"typeUrl": &lt;span class="hljs-string"&gt;"type.googleapis.com/google.crypto.tink.AesGcmKey", &lt;span class="hljs-string"&gt;"value": &lt;span class="hljs-string"&gt;"GiBIZWxsbyFXb3JsZEZVQ0sxYWJjZGprbCQxMjM0NTY3OA==", &lt;span class="hljs-string"&gt;"keyMaterialType": &lt;span class="hljs-string"&gt;"SYMMETRIC" }, &lt;span class="hljs-string"&gt;"status": &lt;span class="hljs-string"&gt;"ENABLED", &lt;span class="hljs-string"&gt;"keyId": &lt;span class="hljs-number"&gt;1000000002, &lt;span class="hljs-string"&gt;"outputPrefixType": &lt;span class="hljs-string"&gt;"TINK" } ] } }] &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Running a connector instance with this configuration in place produces partially encrypted records such as this one in a Kafka topic called &lt;code&gt;personal-data-enc&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-json5"&gt;{ &lt;span class="hljs-attr"&gt;"guid": &lt;span class="hljs-string"&gt;"837abb22-3e56-426b-8748-90d2ce4b1e5c", &lt;span class="hljs-attr"&gt;"personal": &lt;span class="hljs-string"&gt;"jwHqA4krnTk6CymRAVovFI+pJsUF0P3QfrRul0AWVMThdDgBBvlyVxs5mnN7Ma1bAUlZThimuxT3QhoXL+YxPhfByae2UiJSMFDDRXJJyWH9mBEIdt4I+82Jin49EdNo5/Cqbv9g2Qf028mm1KsPPTybJZF04gmLMaXntg2aEBo+EKSwgPCrTLm29a+R2dDFDDCxa7E=", &lt;span class="hljs-attr"&gt;"knownResidences": &lt;span class="hljs-string"&gt;"iQKmeFp7i7CJxPW0wc2XEajabWpr8lgDa0TrwQBZXADo1KfKs2Xjes/fM+bGTm7PEYw1v7J1io1Ab0Xyv40MYV1e/L2RXrJHDmkkQnMkdJ+MSZb9Gr5vd/8u6ndrrer6ucshPB/y1mloAlG1J48F4j7bQ1vrEXK9NjYRZEC5w0VPQrTPehMcyRD4CXt8+RGnL3uvhDuBEMCY7zIz31QwOXc5HSHyHuIUf0b4W74oCk1+gVvO0rT1ywgKKxeEJVKK0gLwz4+Hv5o0XEV6jWmyrnqvqJtp0dXJXH8oV9eEIBNeEp6nBL5X+zivMXtEpeYuoNY+sPYelpkltRJnTq1EfzwHOflkgtTjbgUMMLFrsQ==", &lt;span class="hljs-attr"&gt;"isActive": &lt;span class="hljs-literal"&gt;true, &lt;span class="hljs-attr"&gt;"profilePic": &lt;span class="hljs-string"&gt;"https://picsum.photos/128", &lt;span class="hljs-attr"&gt;"registered": &lt;span class="hljs-string"&gt;"2018-08-12T01:58:44 -02:00" } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The contents of the complex fields have been successfully encrypted. And because encryption was done with &lt;code&gt;field_mode=OBJECT&lt;/code&gt;, the original structures of each &lt;code&gt;personal&lt;/code&gt; and &lt;code&gt;knownResidences&lt;/code&gt; field are opaque. So in addition to protecting sensitive values, this encryption prevents the viewer from even seeing the shape of the information in the complex field. For instance, there's no way to know:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;That &lt;code&gt;personal&lt;/code&gt; is represented by a nested object, and what and how many fields it holds.&lt;/li&gt; &lt;li&gt;That &lt;code&gt;knownResidences&lt;/code&gt; is an array, and how many elements it contains.&lt;/li&gt; &lt;/ul&gt;&lt;h2 id="-encryption-with-field-mode-element-"&gt;Encryption with the ELEMENT field mode&lt;/h2&gt; &lt;p&gt;In contrast to the &lt;code&gt;OBJECT&lt;/code&gt; mode, the &lt;code&gt;ELEMENT&lt;/code&gt; mode enables element-wise processing for complex field types. This mode acts upon the individual fields of nested objects and individual elements in arrays. If you change the &lt;code&gt;field_mode&lt;/code&gt; configuration property to &lt;code&gt;ELEMENT&lt;/code&gt;, partially encrypted records look like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-json5"&gt;{ &lt;span class="hljs-attr"&gt;"guid": &lt;span class="hljs-string"&gt;"837abb22-3e56-426b-8748-90d2ce4b1e5c", &lt;span class="hljs-attr"&gt;"personal": { &lt;span class="hljs-attr"&gt;"firstname": &lt;span class="hljs-string"&gt;"JkEEW6yDzw4iOkiQ3IAeir1hX6Z9gt1pi/1thQJngcH7ORgWAm4MMLFrsQ==", &lt;span class="hljs-attr"&gt;"lastname": &lt;span class="hljs-string"&gt;"J2rv4Z1FTcRUByA/67QQ/im4Gt4YqlKuv5D+m9POUcPUDlpqCUDLDDCxa7E=", &lt;span class="hljs-attr"&gt;"age": &lt;span class="hljs-string"&gt;"IxqTxrGKcBFs3M6+i7S863zywNAniwalRkyd6fI7ENuWmLgMMLFrsQ==", &lt;span class="hljs-attr"&gt;"gender": &lt;span class="hljs-string"&gt;"KCIFdVYWHkmYxJRjNKpulGzy2hVapoSfzPVnhxgHISz031dG7dKuswwwsWux", &lt;span class="hljs-attr"&gt;"height": &lt;span class="hljs-string"&gt;"JAMFXn+hc+8BltkwZeHGza5mcbIW5NK/cuSAHnAPcz6IycrsDDCxa7E=", &lt;span class="hljs-attr"&gt;"weight": &lt;span class="hljs-string"&gt;"I8vbJQjCBbYhh2nOLOxRcF/Ti9n8g/d4cFQlItbnETcpZtAMMLFrsQ==", &lt;span class="hljs-attr"&gt;"eyeColor": &lt;span class="hljs-string"&gt;"J7HqSejwGkgJbqFZw0xXPCX9VqDaGubKgp2+1Esgfcm+c6Xt3TW4DDCxa7E=" }, &lt;span class="hljs-attr"&gt;"knownResidences": [ &lt;span class="hljs-string"&gt;"VNdFbsuo/3duROXZyGbBnfmzw7HH/lHGbY4x3aDhXyfunQVGZZKQjgTDLA8DrRAHxIRH6MYxPowz+hGUM5S4Dygndss4fp6Mgj6uhJKMgsOVhBt8DDCxa7E=", &lt;span class="hljs-string"&gt;"TIfIG3IumUccz4GhgZ5F6QbzHockvsoq9vH+BQVh9ttN/uYJDFYPOd1fLbhZutJKhwm8SJsMujz2L/AnAr7PenSReFsGrhfWwI2kBgwwsWux", &lt;span class="hljs-string"&gt;"UpUiXKBsXWLPJ6Kl6mNbfzPBHVhXqryzzozCOh78kQm7u7GwtHwqrBoWBEEqhhe/M1HVBMqwjt+jJDZUdmfu7LqaME1Z2dPLhs3sd8vTKsJE9gwwsWux", &lt;span class="hljs-string"&gt;"ZhwsRs5tNAId/mHL6hLwFDOEZ5+C0DBfsvpTVHuMu/c4fUNRUR3YAIXKsTBJF833QFVklsVffyf+WlDhGd53IoI0c1U5YSmm7kJcBBrocewnXpRfOOlWDNlNCzKuW9HJoi+Nbah0DDCxa7E=" ], &lt;span class="hljs-attr"&gt;"isActive": &lt;span class="hljs-literal"&gt;true, &lt;span class="hljs-attr"&gt;"profilePic": &lt;span class="hljs-string"&gt;"https://picsum.photos/128", &lt;span class="hljs-attr"&gt;"registered": &lt;span class="hljs-string"&gt;"2018-08-12T01:58:44 -02:00" } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, all the sensitive data parts have been encrypted. This time, however, the structural information is not hidden. For instance, viewers can see that the &lt;code&gt;knownResidences&lt;/code&gt; field contains an array of four elements.&lt;/p&gt; &lt;p&gt;Having access to such structural information may be beneficial in certain scenarios. Imagine a target system that receives all partially encrypted records from a sink connector that had no secret key access and thus can't decrypt the data. This target system might still be able to work with the encrypted data to calculate some simple statistics, such as the minimum, maximum, and average number of known residences across all data records.&lt;/p&gt; &lt;h2 id="-encryption-with-individual-secret-keys-per-field-"&gt;Encryption with individual secret keys per field&lt;/h2&gt; &lt;p&gt;We have seen that you can specify an individual &lt;code&gt;keyId&lt;/code&gt; for selected fields. In our example, &lt;code&gt;personal&lt;/code&gt; and &lt;code&gt;knownResidences&lt;/code&gt; have been encrypted with different keys. The primary benefit of doing so is that the same Kafka topic data can be used to feed different sink connectors while enforcing any combination of field-level access policies. The following cases can be implicitly differentiated with such a setup:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Sink connectors that are allowed to decrypt both fields, &lt;code&gt;personal&lt;/code&gt; and &lt;code&gt;knownResidences&lt;/code&gt; (access to both secret keys must be granted)&lt;/li&gt; &lt;li&gt;Sink connectors that are allowed to decrypt just one of the encrypted fields, either &lt;code&gt;personal&lt;/code&gt; or &lt;code&gt;knownResidences&lt;/code&gt; (access to one of the corresponding secret keys must be granted)&lt;/li&gt; &lt;li&gt;Sink connectors that are not allowed to decrypt either of the fields (no access to the secret keys is granted)&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;Without individual keys, achieving the same flexible level of field-access policies would be hard. For instance, you could be careful to store only a specific subset of the fields into separate Kafka topics, depending on what each sink connector and target system is allowed to see. Then you have to define individual role-based access control settings for these Kafka topics, so that you can grant specific sink connectors access to specific topics. However, this workaround results in a lot of unnecessary redundancy in storage.&lt;/p&gt; &lt;p&gt;The more payload fields need to be individually encrypted and decrypted to support various field-level access policies per sink connector and target system, the more unusable this workaround becomes. It would effectively lead to a combinatorial explosion of separate Kafka topics, which is just impractical.&lt;/p&gt; &lt;h2&gt;Decryption according to field mode with individual keys&lt;/h2&gt; &lt;p&gt;Irrespective of the chosen field mode (&lt;code&gt;OBJECT&lt;/code&gt; or &lt;code&gt;ELEMENT&lt;/code&gt;) or the granularity of key settings, you can decrypt all fields and store the records into the desired target system by creating a sink connector configuration that matches the encrypting configuration.&lt;/p&gt; &lt;p&gt;In this particular example, all decrypted records should ultimately be written to the S3-compatible MinIO object storage. A properly configured &lt;a href="https://camel.apache.org/camel-kafka-connector/0.11.x/reference/connectors/camel-minio-kafka-sink-connector.html"&gt;Camel-MinIO-Kafka-Connector&lt;/a&gt; serves this purpose well:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-json5"&gt;{ &lt;span class="hljs-attr"&gt;"name": &lt;span class="hljs-string"&gt;"minio-s3-sink-dec-001", &lt;span class="hljs-attr"&gt;"config": { &lt;span class="hljs-attr"&gt;"connector.class":&lt;span class="hljs-string"&gt;"org.apache.camel.kafkaconnector.minio.CamelMinioSinkConnector", &lt;span class="hljs-attr"&gt;"value.converter": &lt;span class="hljs-string"&gt;"org.apache.kafka.connect.json.JsonConverter", &lt;span class="hljs-attr"&gt;"value.converter.schemas.enable": &lt;span class="hljs-literal"&gt;false, &lt;span class="hljs-attr"&gt;"key.converter": &lt;span class="hljs-string"&gt;"org.apache.kafka.connect.json.JsonConverter", &lt;span class="hljs-attr"&gt;"key.converter.schemas.enable": &lt;span class="hljs-literal"&gt;false, &lt;span class="hljs-attr"&gt;"topics":&lt;span class="hljs-string"&gt;"personal-data-enc-&lt;objects | elements&gt;", &lt;span class="hljs-attr"&gt;"camel.sink.path.bucketName":&lt;span class="hljs-string"&gt;"kafka-connect-kryptonite-&lt;objects | elements&gt;", &lt;span class="hljs-attr"&gt;"camel.sink.endpoint.endpoint":&lt;span class="hljs-string"&gt;"http://minio:9000", &lt;span class="hljs-attr"&gt;"camel.sink.endpoint.autoCreateBucket":&lt;span class="hljs-literal"&gt;true, &lt;span class="hljs-attr"&gt;"camel.sink.endpoint.keyName":&lt;span class="hljs-string"&gt;"${date:now:yyyyMMdd-HHmmssSSS}-${exchangeId}.json", &lt;span class="hljs-attr"&gt;"transforms": &lt;span class="hljs-string"&gt;"decipher,json2string", &lt;span class="hljs-attr"&gt;"transforms.decipher.type": &lt;span class="hljs-string"&gt;"com.github.hpgrahsl.kafka.connect.transforms.kryptonite.CipherField$Value", &lt;span class="hljs-attr"&gt;"transforms.decipher.cipher_mode": &lt;span class="hljs-string"&gt;"DECRYPT", &lt;span class="hljs-attr"&gt;"transforms.decipher.cipher_data_keys": &lt;span class="hljs-string"&gt;"${file:/secrets/classified.properties:cipher_data_keys}", &lt;span class="hljs-attr"&gt;"transforms.decipher.cipher_data_key_identifier": &lt;span class="hljs-string"&gt;"my-demo-secret-key-123", &lt;span class="hljs-attr"&gt;"transforms.decipher.field_config": &lt;span class="hljs-string"&gt;"[{\"name\":\"personal\"},{\"name\":\"knownResidences\",\"keyId\":\"my-demo-secret-key-987\"}]", &lt;span class="hljs-attr"&gt;"transforms.decipher.field_mode": &lt;span class="hljs-string"&gt;"&lt;OBJECT | ELEMENT&gt;", &lt;span class="hljs-attr"&gt;"transforms.json2string.type": &lt;span class="hljs-string"&gt;"com.github.hpgrahsl.kafka.connect.transforms.kryptonite.util.JsonStringWriter$Value" } } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The SMT's configuration is defined by the &lt;code&gt;transform.decipher.*&lt;/code&gt; properties as follows:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Operate on the records' values (&lt;code&gt;type: "CipherField$Value"&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Decrypt data (&lt;code&gt;cipher_mode: "DECRYPT"&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Load the secret key material from an external key file (&lt;code&gt;cipher_data_keys: "${file:/secrets/classified.properties:cipher_data_keys}&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Use a specific secret key based on its ID (&lt;code&gt;cipher_data_key_identifier: "my-demo-secret-key-123"&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Process only selected payload fields for which different &lt;code&gt;keyId&lt;/code&gt;s are supported. If no &lt;code&gt;keyId&lt;/code&gt; is given for a specific field, use the general &lt;code&gt;keyId&lt;/code&gt; defined in the &lt;code&gt;cipher_data_key_identifier&lt;/code&gt; property is used (&lt;code&gt;field_config: "[{\"name\":\"personal\"},{\"name\":\"knownResidences\",\"keyId\":\"my-demo-secret-key-987\"}]&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Decrypt complex fields (with nested objects or arrays) either as a whole or element by element, matching the mode used during encryption (&lt;code&gt;"transforms.cipher.field_mode": "&lt;OBJECT | ELEMENT&gt;"&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;With this configuration in place, the custom SMT preprocesses and decrypts all records before handing the original plaintext records to the Camel MinIO sink connector for storage into the specified MinIO bucket named &lt;code&gt;kafka-connect-kryptonite-objects&lt;/code&gt; or &lt;code&gt;kafka-connect-kryptonite-elements&lt;/code&gt;. Inspecting one of the bucket objects with the contents of the example record used earlier shows the successfully decrypted data:&lt;/p&gt; &lt;pre&gt; &lt;code class="lang-json5"&gt;{ &lt;span class="hljs-attr"&gt;"profilePic": &lt;span class="hljs-string"&gt;"https://picsum.photos/128", &lt;span class="hljs-attr"&gt;"guid": &lt;span class="hljs-string"&gt;"837abb22-3e56-426b-8748-90d2ce4b1e5c", &lt;span class="hljs-attr"&gt;"registered": &lt;span class="hljs-string"&gt;"2018-08-12T01:58:44 -02:00", &lt;span class="hljs-attr"&gt;"personal": { &lt;span class="hljs-attr"&gt;"firstname": &lt;span class="hljs-string"&gt;"Judy", &lt;span class="hljs-attr"&gt;"gender": &lt;span class="hljs-string"&gt;"female", &lt;span class="hljs-attr"&gt;"eyeColor": &lt;span class="hljs-string"&gt;"brown", &lt;span class="hljs-attr"&gt;"weight": &lt;span class="hljs-number"&gt;50, &lt;span class="hljs-attr"&gt;"age": &lt;span class="hljs-number"&gt;38, &lt;span class="hljs-attr"&gt;"lastname": &lt;span class="hljs-string"&gt;"Hayes", &lt;span class="hljs-attr"&gt;"height": &lt;span class="hljs-number"&gt;167 }, &lt;span class="hljs-attr"&gt;"isActive": &lt;span class="hljs-literal"&gt;true, &lt;span class="hljs-attr"&gt;"knownResidences": [ &lt;span class="hljs-string"&gt;"529 Glenmore Avenue, Waumandee, Connecticut, 8220", &lt;span class="hljs-string"&gt;"489 Lake Street, Glasgow, Tennessee, 1469", &lt;span class="hljs-string"&gt;"927 Rutledge Street, Fresno, Pennsylvania, 5610", &lt;span class="hljs-string"&gt;"728 Debevoise Street, Gerton, Federated States Of Micronesia, 7007" ] } &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This concludes our overview of end-to-end data encryption for file-based flows across different kinds of storage systems. A &lt;a href="https://github.com/hpgrahsl/rhd-csflc-kafka-connect-demos/tree/main/use_case_2"&gt;fully working example&lt;/a&gt; of this file-based integration scenario can be found in the accompanying &lt;a href="https://github.com/hpgrahsl/rhd-csflc-kafka-connect-demos"&gt;demo scenario repository&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="limitations"&gt;Limitations of Kryptonite for Kafka and upcoming enhancements&lt;/h2&gt; &lt;p&gt;Currently, the custom &lt;code&gt;CipherField&lt;/code&gt; SMT has the following limitations, which we hope to overcome in the near future:&lt;/p&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;Instead of assigning the Base64-encoded ciphertext to a field, it could be desirable to preserve the original data format of addressed fields. In cryptography, this is known as &lt;em&gt;format-preserving encryption&lt;/em&gt; (FPE). An illustrative example is a credit card, which is identified by a 16-digit number. Applying FPE would result in a different 16-digit number as the ciphertext. Other examples include phone numbers, social security numbers, and the like, for which the encryption is usually based on permutations over finite sets of numeric, alphabetic, or alphanumeric characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;At the moment, the field-level encryption discussed in this article is implemented as an SMT on top of Kafka Connect's intermediary record format. The SMT's configuration-only approach is tied to Kafka Connect. Encrypting and decrypting fields in other Kafka APIs would need additional, custom effort.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;We hope to eliminate these limitations. Fairly soon, we plan to introduce FPE algorithms. Over a longer period of time, we would like to extend Kryptonite for Kafka so it does not require Kafka Connect. For instance, it would be helpful to support client-side field-level cryptography within stream processing applications written to use Kafka's &lt;a href="https://kafka.apache.org/documentation/streams/"&gt;Streams API&lt;/a&gt; or &lt;a href="https://github.com/confluentinc/ksql"&gt;SQL abstractions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Future versions of Kryptonite for Kafka might also target applications written with the lower-level Kafka producer and consumer APIs. All the cryptography-related code could even be externalized, such as into a separate C library, so that client applications written in non-JVM languages might directly build upon it without the need to reimplement the same cryptography functions across different languages.&lt;/p&gt; &lt;h2 id="summary-outlook"&gt;Kryptonite for Kafka strengthens security in Kafka&lt;/h2&gt; &lt;p&gt;This two-part series has explained the need to go beyond the usual data-at-rest protection when building data pipelines on top of Apache Kafka. The Kryptonite for Kafka community project provides a configurable &lt;code&gt;CipherField&lt;/code&gt; SMT to perform field-level encryption and decryption for Kafka Connect records on their way into and out of Kafka topics.&lt;/p&gt; &lt;p&gt;Kryptonite for Kafka helps users safeguard their most precious data by keeping secret keys under their own control and performing all cryptography operations on the client side. Kafka brokers never get to see any of the plaintext of sensitive record fields.&lt;/p&gt; &lt;p&gt;The examples in the previous article and this one applied the SMT to achieve client-side, end-to-end encryption and decryption across heterogeneous data sources and sinks by means of configuration only. The examples also illustrated the choice between encrypting complex fields in an opaque manner or one that shows their structure, and how to apply individual secret keys for different payload fields.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/10/11/file-based-kafka-connect-scenarios-end-end-encryption" title="File-based Kafka Connect scenarios with end-to-end encryption"&gt;File-based Kafka Connect scenarios with end-to-end encryption&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Hans-Peter Grahsl</dc:creator><dc:date>2022-10-11T07:00:00Z</dc:date></entry><entry><title>Quarkus Newsletter #25 - October</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/quarkus-newsletter-25/&#xA;            " /><author><name>James Cobb (https://twitter.com/insectengine)</name></author><id>https://quarkus.io/blog/quarkus-newsletter-25/</id><updated>2022-10-11T00:00:00Z</updated><published>2022-10-11T00:00:00Z</published><summary type="html">It’s that time of the month…​ time for the latest Quarkus newsletter! "Tutorial: Build a Quarkus web app with Azure App Service on Linux and PostgreSQL" walks you through the process of building, configuring, deploying, and scaling Java web apps on Azure. Vamil Kumar’s article; "Service discovery using SmallRye Stork...</summary><dc:creator>James Cobb (https://twitter.com/insectengine)</dc:creator><dc:date>2022-10-11T00:00:00Z</dc:date></entry><entry><title type="html">RESTEasy 6.2.1.Final Release</title><link rel="alternate" href="https://resteasy.github.io/2022/10/10/resteasy-6.2.1.Final-release/" /><author><name /></author><id>https://resteasy.github.io/2022/10/10/resteasy-6.2.1.Final-release/</id><updated>2022-10-10T18:11:11Z</updated><dc:creator /></entry><entry><title>Top tips on Linux, Rust, Kafka, and more</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/10/10/top-tips-linux-rust-kafka-and-more" /><author><name>Heiker Medina</name></author><id>e8d3ba9b-f454-462b-a9ad-d210d3632f10</id><updated>2022-10-10T07:00:00Z</updated><published>2022-10-10T07:00:00Z</published><summary type="html">&lt;p&gt;September was another fantastic month of content at Red Hat Developer. Check out some of the articles that our developers have created specifically for you! We've got 101-level learning articles, some articles that dive into technical matters, and we'll round out the month with tips and tricks for your current Linux environment.&lt;/p&gt; &lt;h2&gt;Three places to begin your 101 learning&lt;/h2&gt; &lt;ul&gt;&lt;li&gt;Bob Reselman &lt;a href="https://developers.redhat.com/articles/2022/09/14/beginners-guide-regular-expressions-grep"&gt;introduces regular expressions with grep&lt;/a&gt;, and shows you how to use them to match patterns in text. His guide covers the basics of how to write a regular expression and gives many examples. Regular expressions are a way to search for patterns of characters within a larger body of text. They can be used to find all instances of the word &lt;em&gt;bat,&lt;/em&gt; for instance, or all instances of a word that begins with &lt;em&gt;b&lt;/em&gt; and ends with &lt;em&gt;t.&lt;/em&gt;&lt;/li&gt; &lt;li&gt;Join Don Schenck to learn what containers are and how to use them. Schenck describes &lt;a href="https://developers.redhat.com/articles/2022/09/01/my-advice-why-you-should-build-containers-your-pc"&gt;how to build containers that run on Kubernetes and Red Hat OpenShift&lt;/a&gt;. Building a container on your PC requires a local development environment that gives you the complete experience of coding, building, debugging, and running—and then pushing all pieces of the container to a host or cloud service. The container development model lets you decide which operating system and runtimes run your application, as well as which libraries to include. A software container holds the application, libraries, runtimes, operating system, and more.&lt;/li&gt; &lt;li&gt;Want to &lt;a href="https://developers.redhat.com/articles/2022/09/19/best-ways-learn-about-linux-red-hat-developer"&gt;get started with Linux&lt;/a&gt;? We've got you covered. These are some of our favorite and most popular articles, cheat sheets, and lessons to help you get the most out of Linux, along with underlying tools like GCC and Linux-based platforms like Docker.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Challenge yourself with a more difficult lesson&lt;/h2&gt; &lt;ul&gt;&lt;li&gt;In his follow-up article on &lt;code&gt;grep&lt;/code&gt;, Reselman focuses on &lt;a href="https://developers.redhat.com/articles/2022/09/16/regex-how-quantifiers-pattern-collections-and-word-boundaries"&gt;more advanced syntax&lt;/a&gt;: quantifiers, pattern collections, groups, and word boundaries. Follow along to keep learning.&lt;/li&gt; &lt;li&gt;Learn about &lt;a href="https://developers.redhat.com/articles/2022/09/16/updating-docker-hubs-openjdk-image"&gt;Tim Ellison's recommendation for updating OpenJDK images&lt;/a&gt; since Docker Hub's deprecation announcement. Your containers' Java runtime environment could stop receiving updates within the coming months. It's time to take action. Ellison explains the decisions that led to this issue and proposes a solution.&lt;/li&gt; &lt;li&gt;Siddhesh Poyarekar describes a &lt;a href="https://developers.redhat.com/articles/2022/09/17/gccs-new-fortification-level"&gt;new level of fortification supported in GCC&lt;/a&gt;. This new level detects more buffer overflows and runtime bugs, which helps applications run more securely. Poyarekar further discusses two significant improvements to security mitigation and the resulting impact on applications.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Get the most out of your current environment&lt;/h2&gt; &lt;ul&gt;&lt;li&gt;Rust is a great choice for &lt;a href="https://developers.redhat.com/articles/2022/09/01/3-essentials-writing-linux-system-library-rust"&gt;writing a Linux system library&lt;/a&gt; due to memory and thread safety guarantees, a revolutionary approach to memory ownership, and a polished Foreign Function Interface. Even though the learning curve is slightly steep, you'll grow to love the language and especially its compiler. This article is the first in a series focusing on Rust for Linux.&lt;/li&gt; &lt;li&gt;Security automation encompasses a range of products, services, and strategies designed to prevent loss or damage to data, applications, IT systems, and networks. Join Jamie Beck and Himanshu Yadav as they explain &lt;a href="https://developers.redhat.com/articles/2022/09/07/5-examples-security-automation-ansible"&gt;five common use cases for security systems using Ansible&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Check out the &lt;a href="https://developers.redhat.com/articles/2022/09/13/kafka-monthly-digest-august-2022"&gt; Kafka Monthly Digest for August 2022&lt;/a&gt;. This digest is a community effort that contains a list of notable topics in these areas: releases, Kafka improvement proposals, community releases, and blogs.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;September 2022 on Red Hat Developer&lt;/h2&gt; &lt;p&gt;Here's the full lineup of articles published on Red Hat Developer this month:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/17/gccs-new-fortification-level"&gt;GCC's new fortification level: The gains and costs&lt;/a&gt; (Siddhesh Poyarekar)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/07/how-set-your-gitops-directory-structure"&gt;How to set up your GitOps directory structure&lt;/a&gt; (Christian Hernandez)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/01/my-advice-why-you-should-build-containers-your-pc"&gt;My advice on why you should build containers on your PC&lt;/a&gt; (Don Schenck)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/14/beginners-guide-regular-expressions-grep"&gt;A beginner's guide to regular expressions with grep&lt;/a&gt; (Bob Reselman)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/07/5-examples-security-automation-ansible"&gt;5 examples of security automation with Ansible&lt;/a&gt; (Jamie Beck, Himanshu Yadav)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/16/regex-how-quantifiers-pattern-collections-and-word-boundaries"&gt;Regex how-to: Quantifiers, pattern collections, and word boundaries&lt;/a&gt; (Bob Reselman) &lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/16/updating-docker-hubs-openjdk-image"&gt;My advice for updating use of the Docker Hub OpenJDK image&lt;/a&gt; (Tim Ellison)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/01/3-essentials-writing-linux-system-library-rust"&gt;3 essentials for writing a Linux system library in Rust&lt;/a&gt; (Gris Ge)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/19/best-ways-learn-about-linux-red-hat-developer"&gt;Best ways to learn about Linux from Red Hat Developer&lt;/a&gt; (Red Hat Developer)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/13/kafka-monthly-digest-august-2022"&gt;Kafka Monthly Digest: August 2022&lt;/a&gt; (Mickael Maison)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/07/configuring-change-data-capture"&gt;Red Hat OpenShift Connectors: Configuring change data capture &lt;/a&gt;(Bernard Tison)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/05/how-create-c-binding-rust-library"&gt;How to create C binding for a Rust library&lt;/a&gt; (Gris Ge)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/27/end-end-field-level-encryption-apache-kafka-connect"&gt;End-to-end field-level encryption for Apache Kafka Connect&lt;/a&gt; (Hans-Peter Grahsl)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/05/how-create-python-binding-rust-library"&gt;How to create Python binding for a Rust library&lt;/a&gt; (Gris Ge)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/06/build-trust-continuous-integration-your-rust-library"&gt;Build trust in continuous integration for your Rust library&lt;/a&gt; (Gris Ge)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/20/how-hashing-and-cryptography-made-internet-possible"&gt;How hashing and cryptography made the internet possible&lt;/a&gt; (Andy Oram)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/22/learn-about-new-bgp-capabilities-red-hat-openstack-17"&gt;Learn about the new BGP capabilities in Red Hat OpenStack 17&lt;/a&gt; (Daniel Alvarez Sanchez)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/28/build-kogito-serverless-workflow-using-serverless-framework"&gt;Build a Kogito Serverless Workflow using Serverless Framework&lt;/a&gt; (Daniele Martinoli)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/26/find-errors-packages-through-mass-builds"&gt;Find errors in packages through mass builds&lt;/a&gt; (Frédéric Bérat)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/21/bind-services-created-aws-controllers-kubernetes"&gt;Bind services created with AWS Controllers for Kubernetes&lt;/a&gt; (Baiju Muthukadan)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/21/boost-openshift-data-science-intel-ai-analytics-toolkit"&gt;Boost OpenShift Data Science with the Intel AI Analytics Toolkit&lt;/a&gt; (Karl Eklund, Audrey Reznik, Rachel Oberman, and Deb Bharadwaj)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/23/join-red-hat-team-nodeconf-eu-2022"&gt;Join the Red Hat team at NodeConf EU 2022&lt;/a&gt; (Lucas Holmquist)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/articles/2022/09/29/benefits-limitations-flexible-array-members"&gt;The benefits and limitations of flexible array members&lt;/a&gt; (Serge Guelton)&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/10/10/top-tips-linux-rust-kafka-and-more" title="Top tips on Linux, Rust, Kafka, and more"&gt;Top tips on Linux, Rust, Kafka, and more&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Heiker Medina</dc:creator><dc:date>2022-10-10T07:00:00Z</dc:date></entry></feed>
