<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">KOGITO 1.30.0 RELEASED!</title><link rel="alternate" href="https://blog.kie.org/2022/11/kogito-1-30-0-released.html" /><author><name>Tiago Dolphine</name></author><id>https://blog.kie.org/2022/11/kogito-1-30-0-released.html</id><updated>2022-11-14T11:10:16Z</updated><content type="html">We are glad to announce that the Kogito 1.30.0 release is now available! This goes hand in hand with , release. From a feature point of view, we have included a series of new features and bug fixes, including: * Event State timeout * Allow specifying different event marshallers per channel * Start event is not behaving as expected when exclusive is false * New Avro marshallers/unmarshallers addon * Build SWF examples images with Jib * Group all Jobs service JDBC flavors on one container image * Verify that Kaniko is able to push on Kubernetes internal registry * Deprecate Github Showcase Example * Serverless Operator: Setup Nightly pipeline * Update quarkus-openapi-generator to 0.12.0 For more details head to the complete . All artifacts are available now: * Kogito runtime artifacts are available on Maven Central. * Kogito examples can be found. * Kogito images are available on. * Kogito operator is available in the in OpenShift and Kubernetes. * Kogito tooling 0.25.0 artifacts are available at the. A detailed changelog for 1.30.0 can be found in . New to Kogito? Check out our website . Click the "Get Started" button. The post appeared first on .</content><dc:creator>Tiago Dolphine</dc:creator></entry><entry><title>3 ways to embed a commit hash in Go programs</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs" /><author><name>pgeorgia</name></author><id>f2546d72-10b9-4d83-a762-cf5c44656bf6</id><updated>2022-11-14T07:00:00Z</updated><published>2022-11-14T07:00:00Z</published><summary type="html">&lt;p&gt;Whether you are using &lt;a href="https://developers.redhat.com/topics/go"&gt;Go&lt;/a&gt; to write a simple console-based utility or a fancy web application, it is always helpful to reference the previous version of your software. This information is essential, especially for developers. They need to know what the source code looked like in previous versions, so they can debug any issues introduced at specific points in time.&lt;/p&gt; &lt;p&gt;To do that, you need a &lt;em&gt;system&lt;/em&gt; that can &lt;em&gt;control&lt;/em&gt; and manage different &lt;em&gt;versions&lt;/em&gt; of the source code, such as &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt;. Whenever you want to capture a snapshot of the program's current codebase, you run a &lt;code&gt;git commit&lt;/code&gt; command that saves the code at that point in time. To make sure you do not overwrite a previously saved record, &lt;code&gt;git&lt;/code&gt; creates (by default) a unique identifier, hashed with the SHA-1 algorithm, for every &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Usually, when a decent amount of progress has been made, a couple of features have been implemented and lots of bugs have been fixed, it's about time to make things official and announce a new release version of your software. Of course, embedding the release version is not new. You most likely already have automation in place to provide this information within your software (e.g., during the release pipeline). But this kind of progress doesn't happen in a day. So what happens in the meantime? You do what the rolling-release model does, associating every build (&lt;code&gt;go build&lt;/code&gt;) with a snapshot of the code at that point in time. This is when the &lt;code&gt;git commit&lt;/code&gt; hash comes in handy. There are three ways to embed this hash into your Go program.&lt;/p&gt; &lt;h2&gt;1. Using -ldflags&lt;/h2&gt; &lt;p&gt;The most common way is by using a &lt;code&gt;string&lt;/code&gt; variable, a value populated at build time via flags.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;var Commit string&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;go build -ldflags="-X main.Commit=$(git rev-parse HEAD)"&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The disadvantage here is that you need to remember this syntax and run it every time you build your code. You can make this easier by using &lt;code&gt;Makefiles&lt;/code&gt; to do that for you.&lt;/p&gt; &lt;h2&gt;2. Using go generate&lt;/h2&gt; &lt;p&gt;Another way is to use a file (let's call it &lt;code&gt;VERSION.txt&lt;/code&gt;). This process requires the installation of Go 1.16 or later, since it uses &lt;code&gt;go:generate&lt;/code&gt; to populate the file contents and &lt;code&gt;go:embed&lt;/code&gt; to populate the variable. For example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;//go:generate sh -c "printf %s $(git rev-parse HEAD) &gt; VERSION.txt" //go:embed VERSION.txt var Commit string&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You have to remember to run &lt;code&gt;go generate&lt;/code&gt; every time before &lt;code&gt;go build&lt;/code&gt;. To avoid developing an unnecessary memory muscle, you can put this block into your &lt;code&gt;Makefile&lt;/code&gt;, which is part of the &lt;code&gt;@build&lt;/code&gt; target.&lt;/p&gt; &lt;p&gt;With this method, you have a file (&lt;code&gt;VERSION.txt&lt;/code&gt;) that always captures the &lt;em&gt;latest&lt;/em&gt; &lt;code&gt;commit hash&lt;/code&gt; of the repository. While this information is not &lt;em&gt;that&lt;/em&gt; useful information for you (since you can also see this information in GitHub's user interface or just using &lt;code&gt;git&lt;/code&gt;), the advantage here is that you can use this file for other things in your &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; environment as well. If a component needs to know the version, now it has an easy way to find it: by reading this file.&lt;/p&gt; &lt;p&gt;However, the downside here is that you have to remember to include that file as part of your code well. This is something that is generated by the computer and not written by a person, so it's not uncommon for people to forget about it.&lt;/p&gt; &lt;p&gt;This way is mostly preferred when you are officially releasing a new stable version of your software, but not every time your merge a PR. Although I can see the benefits, I wouldn't recommend this for daily use.&lt;/p&gt; &lt;h2&gt;3. Using runtime/debug package&lt;/h2&gt; &lt;p&gt;The third solution to this problem is quite simple and comes fresh from the &lt;a href="https://pkg.go.dev/runtime/debug"&gt;&lt;u&gt;runtime/debug package&lt;/u&gt;&lt;/a&gt;, which is already part of the official Go library.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cpp"&gt;import "runtime/debug" var Commit = func() string { if info, ok := debug.ReadBuildInfo(); ok { for _, setting := range info.Settings { if setting.Key == "vcs.revision" { return setting.Value } } } return "" }()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from &lt;code&gt;vsc.revision&lt;/code&gt;, you can also query for &lt;code&gt;vcs.time&lt;/code&gt; (that is the &lt;code&gt;timestamp&lt;/code&gt; of the commit message) and check &lt;code&gt;vcs.modified&lt;/code&gt; (that is &lt;code&gt;true&lt;/code&gt; if the binary builds from &lt;em&gt;uncommitted&lt;/em&gt; changes). To make this work, you need Go 1.18, and should build using the &lt;code&gt;-buildvcs&lt;/code&gt; (which should be available in your &lt;code&gt;goenv&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;This is a great way to include the commit hash information without having to take care of building with a specific set of &lt;code&gt;ldflags&lt;/code&gt; or running &lt;code&gt;go generate&lt;/code&gt; every single time. As long as you have Go 1.18 or higher, a simple &lt;code&gt;go build&lt;/code&gt; should suffice to pass the git information into the &lt;code&gt;Commit string&lt;/code&gt; variable.&lt;/p&gt; &lt;h2&gt;What's the best way to embed a commit hash?&lt;/h2&gt; &lt;p&gt;You might ask: Which of the three ways is the best? The answer is that you should pick the one that fits your needs. You might not need any of these methods, or you might use more than one in combination.&lt;/p&gt; &lt;p&gt;Personally, I like the last way, because I don't need a &lt;code&gt;Makefile&lt;/code&gt; and I don't want to remember to do anything extra out of the ordinary. So, if the usual &lt;code&gt;go build&lt;/code&gt; gives me all I need, then that's enough for me. Less is more!&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs" title="3 ways to embed a commit hash in Go programs"&gt;3 ways to embed a commit hash in Go programs&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>pgeorgia</dc:creator><dc:date>2022-11-14T07:00:00Z</dc:date></entry><entry><title type="html">Getting started with gRPC on Java</title><link rel="alternate" href="http://www.mastertheboss.com/java/getting-started-with-grpc-on-java/" /><author><name>F.Marchioni</name></author><id>http://www.mastertheboss.com/java/getting-started-with-grpc-on-java/</id><updated>2022-11-10T17:08:15Z</updated><content type="html">This article is an introduction to gRPC framework which allows to connect services across data centers using high performance Remote Procedure Calls (RPC). To learn the building blocks of this framework, we will show how to create and test your first gRPC application in Java. Overview of gRPC Firstly, some basic concepts: in gRPC, a ... The post appeared first on .</content><dc:creator>F.Marchioni</dc:creator></entry><entry><title>Set up an OpenShift cluster to deploy an application in odo CLI</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/10/set-openshift-cluster-deploy-application-odo-cli" /><author><name>Francesco Ilario</name></author><id>99cd9947-0cf8-487c-9e3d-9cf898d48fcb</id><updated>2022-11-10T07:00:00Z</updated><published>2022-11-10T07:00:00Z</published><summary type="html">&lt;p&gt;Binding is the task of finding a backing service and connecting it to an application, such as a database. There are several ways to bind applications to cloud services in &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. The &lt;a href="https://odo.dev/"&gt;odo&lt;/a&gt; command-line interface (CLI) consolidates steps that developers normally have to perform manually, and abstracts away Kubernetes and OpenShift background concepts.&lt;/p&gt; &lt;p&gt;With &lt;code&gt;odo&lt;/code&gt;, you can concentrate on creating applications instead of administering the cluster. The &lt;code&gt;odo&lt;/code&gt; tool automates deployment configurations, build configurations, service routes, and other Kubernetes and OpenShift elements.&lt;/p&gt; &lt;p&gt;The Service Binding Operator, employed by &lt;code&gt;odo&lt;/code&gt;, makes the application developer's life a lot easier by providing a consistent and declarative Service Binding method.&lt;/p&gt; &lt;p&gt;This two-part series demonstrates how to use &lt;code&gt;odo&lt;/code&gt; to create an application and a database service, bind the application to the database using the Service Binding Operator, and get access to the application's REST API. This article prepares the environment with the necessary tools. In part 2, &lt;a href="https://developers.redhat.com/articles/2022/08/11/how-install-and-bind-mongodb-and-rest-application"&gt;Implementation of RestAPI application with MongoDB using SBO&lt;/a&gt;, we will install MongoDB and the application, and bind them together.&lt;/p&gt; &lt;h2&gt;A REST application example&lt;/h2&gt; &lt;p&gt;We will use a REST application written in Go as an example here. The application connects to a MongoDB database using the Service Binding Operator and allows you to manage entries in the database. Data consists of place names and descriptions. The REST API's endpoints allow you to add details to the MongoDB instance and perform create, read, update, and delete (CRUD) operations.&lt;/p&gt; &lt;p&gt;When you request a binding, the Service Binding Operator looks at the data stored within the custom resource (CR) and its corresponding custom resource definition (CRD) inside the service. This data contains the parameters required to bind the application to the service. The Service Binding Operator then projects this binding data into the application's workload resources as environment variables or files. To learn more about the Service Binding Operator and its integration with other products, refer to the &lt;a href="https://redhat-developer.github.io/service-binding-operator/userguide/intro.html"&gt;Service Binding documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To run and interact with the application, you must complete the following procedures successfully:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;Install Go and &lt;code&gt;odo&lt;/code&gt; packages&lt;/li&gt; &lt;li&gt;Set up an OpenShift cluster with administrator access&lt;/li&gt; &lt;li&gt;Install the Percona Distribution for MongoDB Operator&lt;/li&gt; &lt;li&gt;Install the Service Binding Operator&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;We will use the following versions of these tools to showcase the application:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Go 1.18.7&lt;/li&gt; &lt;li&gt;odo v3.0.0&lt;/li&gt; &lt;li&gt;OpenShift 4.11&lt;/li&gt; &lt;li&gt;Percona Distribution for MongoDB Operator 1.13.0, provided by &lt;a href="https://www.percona.com"&gt;Percona&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;The following steps provide instructions for each prerequisite.&lt;/p&gt; &lt;h2&gt;Step 1: Install Go and odo packages&lt;/h2&gt; &lt;div&gt; &lt;div&gt;&lt;span&gt;Install Go following the &lt;a href="https://go.dev/doc/install"&gt;official guidelines&lt;/a&gt;.&lt;/span&gt;&lt;/div&gt;   &lt;div&gt;&lt;span&gt;The odo installation process is as simple as downloading the binary for your OS/ARCH and placing it into a folder referenced by your PATH environment variable. In the following you find the installation procedure for Linux/amd64 and odo-v3.0.0. For a different OS or architecture, check the &lt;/span&gt;&lt;a href="https://odo.dev/docs/overview/installation"&gt;&lt;span&gt;odo Installation page&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/div&gt; &lt;div&gt; &lt;/div&gt; &lt;/div&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;Download the latest release from the mirror site&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ curl -L https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/odo/v3.0.0/odo-linux-amd64 -o odo % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 66.7M 100 66.7M 0 0 3261k 0 0:00:20 0:00:20 --:--:-- 3729k&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;odo&lt;/code&gt;,&lt;span&gt; you might have to provide your password for root access&lt;/span&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ sudo install -o root -g root -m 0755 odo /usr/local/bin/odo [sudo] password for user:&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are not allowed to use &lt;code&gt;sudo&lt;/code&gt; or you prefer a rootless installation, you can install the &lt;code&gt;odo&lt;/code&gt; tool to a local folder, like for example &lt;code&gt;~/.local/bin&lt;/code&gt;, and configure your shell:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ mkdir -p ~/.local/bin $ mv odo ~/.local/bin $ export PATH=${HOME}/.local/bin/odo:${PATH} &lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Verify that &lt;code&gt;odo&lt;/code&gt; is installed:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ odo version odo v3.0.0 (8694f1946)&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Step 2: Set up an OpenShift cluster&lt;/h2&gt; &lt;div&gt; &lt;div&gt;&lt;span&gt;There are several ways to use OpenShift, like using &lt;/span&gt;&lt;a href="https://github.com/code-ready/crc"&gt;&lt;span&gt;crc&lt;/span&gt;&lt;/a&gt;&lt;span&gt; or running a managed cluster. You can find more details in the &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;getting started page&lt;/a&gt;. To complete the demo, please ensure to have a cluster with at least 16GB of memory.&lt;/span&gt;&lt;/div&gt;   &lt;div&gt;&lt;span&gt;After you install and log into your own cluster, or log into a managed cluster in the cloud, create a project with the following command:&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;pre&gt; &lt;code&gt;$ odo create project mongodb-restapi ✓ Project "mongodb-restapi" is ready for use ✓ New project created and now using project: mongodb-restapi&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Step 3: Install the Percona Distribution for MongoDB Operator&lt;/h2&gt; &lt;p&gt;We are not installing from &lt;a href="https://operatorhub.io"&gt;OperatorHub&lt;/a&gt; because the installation should be done to our specific &lt;code&gt;mongodb-restapi&lt;/code&gt; OpenShift namespace.&lt;/p&gt; &lt;p&gt;Follow these two steps:&lt;/p&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;Install the Percona Distribution for MongoDB Operator:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/openshift-app-services-demos/main/samples/sbo/restapi-mongodb-odo/operators/mongodb-percona-distribution.yaml subscription.operators.coreos.com/percona-server-mongodb-operator created operatorgroup.operators.coreos.com/operatorgroup created&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;Verify that you have successfully installed the Percona Distribution for MongoDB Operator. Figure 6 shows the output. &lt;pre&gt; &lt;code&gt;$ oc get csv -n mongodb-restapi NAME DISPLAY VERSION REPLACES PHASE percona-server-mongodb-operator.v1 Percona Distribution for MongoDB Operator 1.13.0 Succeeded&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Step 4: Install the Service Binding Operator&lt;/h2&gt; &lt;p&gt;The Service Binding Operator is always installed in all namespaces. Here, we are not installing from the OperatorHub because we must install the Operator in a particular namespace named &lt;code&gt;openshift-operators&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The following two steps will complete the process:&lt;/p&gt; &lt;ol&gt;&lt;li&gt; &lt;p&gt;Install the Service Binding Operator:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/openshift-app-services-demos/main/samples/sbo/restapi-mongodb-odo/operators/servicebinding-operator.yaml subscription.operators.coreos.com/my-service-binding-operator created &lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Verify that the Service Binding Operator is successfully installed in your namespace:&lt;/p&gt; &lt;pre&gt; &lt;code&gt;$ oc get csv -n mongodb-restapi NAME DISPLAY VERSION REPLACES PHASE percona-server-mongodb-operator.v1 Percona Distribution for MongoDB Operator 1.13.0 Succeeded service-binding-operator.v1.3.0 Service Binding Operator 1.3.0 service-binding-operator.v1.2.0 Succeeded&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The installation and setup are now complete. In the &lt;a href="https://developers.redhat.com/articles/2022/08/11/how-install-and-bind-mongodb-and-rest-application"&gt;next article&lt;/a&gt;, you will clone the application and create a database component for it. If you have questions, please comment below. We welcome your feedback.&lt;/p&gt; &lt;ul&gt;&lt;/ul&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/10/set-openshift-cluster-deploy-application-odo-cli" title="Set up an OpenShift cluster to deploy an application in odo CLI"&gt;Set up an OpenShift cluster to deploy an application in odo CLI&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Francesco Ilario</dc:creator><dc:date>2022-11-10T07:00:00Z</dc:date></entry><entry><title>Starting Quarkus 3</title><link rel="alternate" href="&#xA;                https://quarkus.io/blog/road-to-quarkus-3/&#xA;            " /><author><name>Max Rydahl Andersen (https://twitter.com/maxandersen)</name></author><id>https://quarkus.io/blog/road-to-quarkus-3/</id><updated>2022-11-10T00:00:00Z</updated><published>2022-11-10T00:00:00Z</published><summary type="html">Quarkus 3 will continue the tradition of propelling Java development forward by moving fast and keep bringing a cutting-edge user experience with the latest technologies. We are happy to make a first Quarkus 3 Alpha available for users to try out and extension writers to integrate with so that we...</summary><dc:creator>Max Rydahl Andersen (https://twitter.com/maxandersen)</dc:creator><dc:date>2022-11-10T00:00:00Z</dc:date></entry><entry><title>How static application security testing improves software security</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/09/how-static-application-security-testing-improves-software-security" /><author><name>Florencio Cano Gabarda</name></author><id>bd669d29-5afa-4243-9978-b13072135c19</id><updated>2022-11-09T07:00:00Z</updated><published>2022-11-09T07:00:00Z</published><summary type="html">&lt;p&gt;Static application security testing (SAST) is one of the most effective techniques to improve application security. The term covers a variety of testing techniques that analyze an application's source, bytecode, or binary code for security vulnerabilities. Typically, developers complete this analysis during the software development lifecycle of an &lt;a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-218.pdf"&gt;application&lt;/a&gt;. Many SAST tools are mature, and the techniques have become central to &lt;a href="https://developers.redhat.com/topics/secure-coding"&gt;secure coding&lt;/a&gt;. Source code is the most common target of SAST, but you can also utilize SAST on bytecode and binary code.&lt;/p&gt; &lt;p&gt;Binary scanning analyzes the binary itself or the result of disassembling or decompiling it. Scanning binaries can add a benefit, unlike source code scanning, which identifies vulnerabilities created by the compiler. On the other hand, the reports from scanning binaries have many more false positives in some cases.&lt;/p&gt; &lt;p&gt;In general, SAST tools may generate many false positives and require tuning. The &lt;a href="https://redhatproductsecurity.github.io/secure-development-guide/code-scanning/sast.html"&gt;Red Hat Security Guide&lt;/a&gt; provides an overview of SAST.&lt;/p&gt; &lt;h2&gt;Why is SAST important?&lt;/h2&gt; &lt;p&gt;As SAST tools analyze source code, they can point to the exact location of problematic statements. Dynamic application security testing (&lt;a href="https://www.redhat.com/en/blog/automated-dynamic-application-security-testing-enhancing-development-security-rapidast"&gt;DAST&lt;/a&gt;) and other runtime testing can indicate an existing problem, but they might not indicate where the it is.&lt;/p&gt; &lt;p&gt;Additionally, SAST is a recommendation and requirement by many regulations, standards, and frameworks, including the &lt;a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/"&gt;US Executive Order on Improving the Nation's Cybersecurity&lt;/a&gt;, NIST's &lt;a href="https://csrc.nist.gov/publications/detail/sp/800-218/final"&gt;Secure Software Development Framework&lt;/a&gt; (SSDF), and NIST's &lt;a href="https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final"&gt;Security and Privacy Controls for Information Systems and Organizations&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;How SAST works&lt;/h2&gt; &lt;p&gt;SAST tools parse the source code, bytecode, or binary code to identify security vulnerabilities. The following sections describe two popular techniques that search for patterns and taint analysis.&lt;/p&gt; &lt;h3&gt;How SAST tools search patterns&lt;/h3&gt; &lt;p&gt;A SAST tool frequently looks for patterns and has a catalog of possibly dangerous code constructs. Many tools support ad-hoc patterns too. These tools report a vulnerability whenever it finds a dangerous pattern in the source code. For example, to identify an SQL injection vulnerability in Java, the SAST scanner would search for something like the following:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;String query = "SELECT username FROM users WHERE userid = " + request.getParameter("userid");&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, the tool needs to do the scan generically, so the patterns are generalized versions of code fragments. For example, a tool may scan for a pattern like the following, where &lt;code&gt;$COLUMN&lt;/code&gt;, &lt;code&gt;$TABLE&lt;/code&gt;, &lt;code&gt;$ATTRIBUTE&lt;/code&gt;, and the arguments to &lt;code&gt;getParameter&lt;/code&gt; can be anything:&lt;/p&gt; &lt;pre&gt; &lt;code class="java"&gt;String query = "SELECT $COLUMN FROM $TABLE WHERE $ATTRIBUTE = " + request.getParameter(...);&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This technique, unfortunately, generates many false positives.&lt;/p&gt; &lt;h3&gt;How Taint analysis works&lt;/h3&gt; &lt;p&gt;Taint analysis finds data that comes into the program from untrusted sources, such as user input, and marks that data as tainted. Tainted data is considered dangerous to use. Then, the tool follows this tainted data in the code to see whether any known cleaning function cleans it. The tool reports a security vulnerability if tainted data is passed as a parameter to a dangerous function (a sink) before cleaning.&lt;/p&gt; &lt;p&gt;Tainted analysis techniques report fewer false positives than pattern-based rules, but still may report too many false positives if the SAST scanner is not tuned. When tuning, you disallow rules that generate too many false positives and specify cleaning functions. This analysis is not a trivial effort.&lt;/p&gt; &lt;h2&gt;Other types of SAST&lt;/h2&gt; &lt;p&gt;Some people include Software Composition Analysis (SCA) and hardcoded secrets scanning in the concept of SAST. SCA identifies dependencies used by a code base and their versions. Then various vulnerability databases are consulted to determine whether these dependencies have known vulnerabilities.&lt;/p&gt; &lt;p&gt;Hardcoded secrets scanning identifies whether the source code contains secrets such as passwords, API keys, or private keys. Good security practices recommend storing secrets separately from source code, such as environment variables or a secrets management solution.&lt;/p&gt; &lt;h2&gt;The SAST workflow&lt;/h2&gt; &lt;p&gt;You should execute SAST tools as much to the left (at early stages) as possible in the development lifecycle of an application. Developers should build these tools into their integrated development environment (IDE) if possible. That way, they can see potential issues in the source code and fix them as the developers code.&lt;/p&gt; &lt;p&gt;Another place to execute SAST tools is when a developer creates a pull or merge request. If the ruleset used by the tool is mature enough, you should add the findings as comments to the commit and block the pull request until you fix the vulnerabilities.&lt;/p&gt; &lt;p&gt;It is challenging to completely eliminate false positives in the real world. So organizations could establish a threshold whereby a pull request is blocked only by matches made by mature or high-severity rules.&lt;/p&gt; &lt;p&gt;It is more manageable to enable only a few rules when initiating a SAST program so that you can develop as many findings and false positives as you can handle. If you enable all the rules from the beginning, you will have so many false positives that you may give up executing the SAST tool or ignore the findings.&lt;/p&gt; &lt;h2&gt;The languages SAST tools support&lt;/h2&gt; &lt;p&gt;Some SAST tools support multiple languages, whereas others focus on only one, such as &lt;a href="https://github.com/securego/gosec"&gt;gosec&lt;/a&gt; for Go or &lt;a href="https://engineering.fb.com/2020/08/07/security/pysa/"&gt;Pysa&lt;/a&gt; for Python. The tools dedicated to a single language usually implement more specific rules.&lt;/p&gt; &lt;p&gt;Considering multi-language open source SAST tools, we would like to highlight &lt;a href="https://github.com/returntocorp/semgrep"&gt;Semgrep&lt;/a&gt; and &lt;a href="https://github.com/joernio/joern"&gt;Joern&lt;/a&gt;. Both tools are designed to integrate easily into &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;continuous integration/continuous delivery&lt;/a&gt; (CI/CD) pipelines.&lt;/p&gt; &lt;h2&gt;Static application security testing is a worthwhile investment&lt;/h2&gt; &lt;p&gt;Static application security testing (SAST) is an excellent technique for identifying security vulnerabilities in applications, but a significant effort is required to tune SAST tools to make them more usable. The investment in developing a successful SAST program should not be underestimated. If the program is implemented properly, the software's security improves significantly.&lt;/p&gt; &lt;p&gt;You can find an extensive list of SAST tools on &lt;a href="https://github.com/analysis-tools-dev/static-analysis"&gt;GitHub&lt;/a&gt;, including a &lt;a href="https://github.com/analysis-tools-dev/static-analysis#binary"&gt;section on binary code&lt;/a&gt; scanners. The NIST page on &lt;a href="https://www.nist.gov/itl/ssd/software-quality-group/binary-code-scanners"&gt;binary code scanners&lt;/a&gt; also contains a SAST tools list.&lt;/p&gt; &lt;p&gt;We welcome your questions and feedback in the comments section below.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/09/how-static-application-security-testing-improves-software-security" title="How static application security testing improves software security"&gt;How static application security testing improves software security&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Florencio Cano Gabarda</dc:creator><dc:date>2022-11-09T07:00:00Z</dc:date></entry><entry><title>Deprecating and removing components from JBoss Tools</title><link rel="alternate" type="text/html" href="https://tools.jboss.org/blog/2022-11-09-component-lifetime-policy.html" /><category term="release" /><category term="jbosstools" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/2022-11-09-component-lifetime-policy.html</id><updated>2022-11-10T08:15:24Z</updated><published>2022-11-09T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div class="paragraph"&gt; &lt;p&gt;JBoss Tools is a set of Eclipse plugins and features that can be installed from the &lt;a href="https://marketplace.eclipse.com"&gt;Eclipse marketplace&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It represents a huge &lt;a href="https://github.com/jbosstools"&gt;code base&lt;/a&gt; and is divided into bigger artificats that are called components. The component grouping of plugins and features represents major and independant functionnality: there is one component for OpenShift and another one for Quarkus for example.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So there are components that have been started a while ago as the JBoss Tools code base is quite old and other ones that have been started quite recently (eg Quarkus).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So there are components that are related to a technology that is not anymore widely used so the component code base is not updated at all.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Those components are candidates to be removed from the bits that are published with each JBoss Tools release.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So we decided to follow the following policy for those components:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;such a component will first be declared obsolete but will still be part of the next Jboss Tools release. It will be listed as such in the release notes&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;then this component will be removed from the following JBoss Tools release&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We think that let users react accordingly as they will have at least 3 monthes before the component is removed from the distribution.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So in the next JBoss Tools release (4.26.0.Final), we are declaring obsolete the following components:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;WebServices&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JSF&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Seam&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Batch&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Visual Page Editor&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Central installation&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Also, as they were declared obsolete a while ago, we are removing the following components:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Forge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Livereload&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Angular&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;JSDT&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;</content><summary>JBoss Tools is a set of Eclipse plugins and features that can be installed from the Eclipse marketplace. It represents a huge code base and is divided into bigger artificats that are called components. The component grouping of plugins and features represents major and independant functionnality: there is one component for OpenShift and another one for Quarkus for example. So there are components that have been started a while ago as the JBoss Tools code base is quite old and other ones that have been started quite recently (eg Quarkus). So there are components that are related to a technology that is not anymore widely used so the component...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2022-11-09T00:00:00Z</dc:date></entry><entry><title>.NET 7 now available for RHEL and OpenShift</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/08/net-7-now-available-rhel-and-openshift" /><author><name>John Clingan</name></author><id>b684ba57-1243-4e26-84fe-89001bd7f4a0</id><updated>2022-11-08T17:00:00Z</updated><published>2022-11-08T17:00:00Z</published><summary type="html">&lt;p&gt;This is a quick overview of what developers need to know about this new major release. The .NET 7 release is now available, targeting&lt;a href="https://developers.redhat.com/products/rhel/overview"&gt; Red Hat Enterprise Linux (RHEL)&lt;/a&gt; 8.7, RHEL 9.1, and&lt;a href="https://developers.redhat.com/products/openshift/overview"&gt; Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;.NET 7 includes 7 new features&lt;/h2&gt; &lt;p&gt;These are the seven new features included in the new .NET 7 release:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;strong&gt;IBM Power support:&lt;/strong&gt; .NET is available for the following architectures:  &lt;ul&gt;&lt;li&gt;ppc64le (64-bit IBM Power) architecture for RHEL 8 and RHEL 9&lt;/li&gt; &lt;li&gt;x86_64 architecture (64-bit Intel/AMD)&lt;/li&gt; &lt;li&gt;ARM64 (64-bit ARM)&lt;/li&gt; &lt;li&gt;s390x (64-bit IBM Z)&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;C# updated to C#11:&lt;/strong&gt; New language version C# 11 included.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;New build support:&lt;/strong&gt; Supports building completely native console applications.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Performance improvements:&lt;/strong&gt; Many performance improvements were made throughout the base libraries, GC and JIT. A new source generator for regular expressions eliminates the cost of compiling (or interpreting) regular expressions at runtime.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;New APIs and improved monitoring:&lt;/strong&gt; It comes with new APIs for working with tar files and Unix file permissions. Improved support for OpenTelemetry.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Generic Math:&lt;/strong&gt; Allows writing generic algorithms that work against any of the built-in numeric types and enables building your own numeric types.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;ASP.NET Core 7 improvements:&lt;/strong&gt; Improves the performance of HTTP/2 and HTTP/3. It extends the minimal APIs (introduced in .NET 6) with additional OpenAPI support, endpoint filters, and route groups.&lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;How to install .NET 7&lt;/h2&gt; &lt;p&gt;Follow these quick steps to install .NET 7 on RHEL.&lt;/p&gt; &lt;p&gt;1. Enter the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-html"&gt;# dnf install dotnet-sdk-7.0&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;2. Obtain the container image:&lt;/p&gt; &lt;p&gt;The .NET 7 SDK and runtime container images are available in the Red Hat Container Registry. Container images can be used standalone and with OpenShift on all supported architectures.&lt;/p&gt; &lt;p&gt;Enter the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ podman run --rm registry.redhat.io/ubi8/dotnet-70 dotnet --version 7.0.100&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Standard-term support for .NET 7&lt;/h2&gt; &lt;p&gt;The .NET 7 release provides standard-term support for 18 months. Support will be available until May 2024.&lt;/p&gt; &lt;p&gt;Based on the .NET release schedule, the next version, .NET 8, will be a long-term support release. The release target date is November 2023, and it will provide three years of support.&lt;/p&gt; &lt;p&gt;The existing .NET Core 3.1 and .NET 6 releases provide support until December 2022 and November 2024, respectively.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;This article announced the release of .NET 7 and described its new features. We also demonstrated how to install .NET 7 on RHEL. Please comment below if you have any questions. We welcome your feedback.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/08/net-7-now-available-rhel-and-openshift" title=".NET 7 now available for RHEL and OpenShift"&gt;.NET 7 now available for RHEL and OpenShift&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>John Clingan</dc:creator><dc:date>2022-11-08T17:00:00Z</dc:date></entry><entry><title>A visual guide to deploying JBoss EAP on AWS</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/08/visual-guide-deploying-jboss-eap-aws" /><author><name>Philip Hayes</name></author><id>a6b608d6-7c51-4345-8c73-94b1967d0705</id><updated>2022-11-08T11:00:00Z</updated><published>2022-11-08T11:00:00Z</published><summary type="html">&lt;p&gt;Red Hat recently launched a new offering for &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/application-platform"&gt;Red Hat JBoss Enterprise Application Platform &lt;/a&gt;(JBoss EAP), an efficient and comprehensive &lt;a href="https://developers.redhat.com/java"&gt;Java&lt;/a&gt; platform on the Amazon Web Services marketplace. This offering allows you to deploy certified Amazon Machine Images (AMIs) equipped with &lt;a href="https://developers.redhat.com/products/rhel"&gt;Red Hat Enterprise Linux&lt;/a&gt; (fully supported by Red Hat) and JBoss EAP.  &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You are not required to have an existing JBoss EAP subscription from Red Hat prior to utilizing this service. This is a pay-as-you-go offering. Amazon will bill you for the service.&lt;/p&gt; &lt;h2&gt;6 Steps to deploy a JBoss EAP on AWS&lt;/h2&gt; &lt;p&gt;The following six steps guide you through provisioning, running, and connecting to JBoss EAP on AWS.&lt;/p&gt; &lt;h2&gt;Step 1: Prerequisites set up&lt;/h2&gt; &lt;p&gt;Set up the following prerequisites:&lt;/p&gt; &lt;ol&gt;&lt;li&gt;&lt;a href="https://portal.aws.amazon.com/billing/signup#/start/email"&gt;Sign up&lt;/a&gt; for an Amazon Web Services account.&lt;/li&gt; &lt;li&gt;Install the &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"&gt;Amazon Web Services command-line interface&lt;/a&gt; (CLI) and configure with your account credentials.&lt;/li&gt; &lt;/ol&gt;&lt;h2&gt;Step 2: Subscribe to the software agreement&lt;/h2&gt; &lt;p&gt;Before you launch an instance of Red Hat JBoss Enterprise Application Platform on AWS EC2, you need to find the appropriate offering in your locality and subscribe to the software agreement.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Search the AWS Marketplace for &lt;strong&gt;JBoss EAP&lt;/strong&gt; and filter by &lt;strong&gt;Red Hat&lt;/strong&gt; and &lt;strong&gt;Red Hat Limited&lt;/strong&gt; to find the offerings (Figure 1).&lt;/li&gt; &lt;/ul&gt;&lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws01.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws01.png?itok=X-YgVAax" width="1170" height="856" alt="Search for "JBoss EAP" and filter by "Red Hat" on the AWS Marketplace." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1: Search for "JBoss EAP" and filter by "Red Hat" on the AWS Marketplace. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;If you are based in the EU, select the offer from &lt;strong&gt;Red Hat Limited&lt;/strong&gt;. Otherwise, select the offer from &lt;strong&gt;Red Hat&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;On the offer subscription page, click &lt;strong&gt;Continue to Subscribe&lt;/strong&gt; (Figure 2).&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws02.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws02.png?itok=C5iaMjDz" width="1154" height="559" alt="Choose the appropriate image and press "Continue to Subscribe" on the top right." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2: Choose the appropriate image and press "Continue to Subscribe" on the top right. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Next, you will move to the &lt;strong&gt;Subscribe to Software&lt;/strong&gt; page (Figure 3). Accept the terms and conditions of the subscription by clicking &lt;strong&gt;Accept Terms&lt;/strong&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws03.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws03.png?itok=WDVITQ_m" width="1148" height="583" alt="The "Subscribe to this software" page has a "Accept Terms" button." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3: The "Subscribe to this software" page has a "Accept Terms" button. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Once you have subscribed to this software subscription and accepted the terms and conditions, you can configure and launch an EC2 instance.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Step 3: Set up billing options&lt;/h2&gt; &lt;p&gt;There are two billing options for JBoss EAP on AWS:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Hourly: You pay on an hourly basis for using JBoss EAP on AWS and for the associated EC2 infrastructure.&lt;/li&gt; &lt;li&gt;Annual: You will be billed upfront for the JBoss EAP subscription. The cost of the associated EC2 infrastructure is on an hourly basis.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;We will choose the hourly billing option. You can skip the contract selection on the main offer page.&lt;/p&gt; &lt;h2&gt;Step 4: Launch an instance of JBoss EAP on AWS&lt;/h2&gt; &lt;p&gt;As with all AWS services, You can launch JBoss EAP EC2 instances in multiple ways, such as the AWS management console, AWS CLI, or cloud formation templates. In this article, we will use the AWS management console and the AWS CLI. There are several steps involved for each method.&lt;/p&gt; &lt;h3&gt;7 steps to create an instance in the AWS management console&lt;/h3&gt; &lt;p&gt;For this article, we will simulate the experience of a user configuring and deploying an EC2 instance into a new AWS environment with no security groups. You may find some objects in your environment. You can choose these or create new objects as described in this case.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Click &lt;strong&gt;Continue to Configuration&lt;/strong&gt; on the marketplace offering page to launch an instance of JBoss EAP on AWS using the AWS management console. Then the console displays the &lt;strong&gt;Configure this software&lt;/strong&gt; screen shown in Figure 4.&lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws04.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws04.png?itok=8BPNl8X-" width="1164" height="879" alt="Choose the Amazon Machine Image, software version, and region." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4: Choose the Amazon Machine Image, software version, and region. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; From this page (Figure 4), you can choose your Amazon Machine Image (AMI), software version, and region. For this example, we select the defaults. Click &lt;strong&gt;Continue to Launch&lt;/strong&gt; to configure the EC2 instance. Then the &lt;strong&gt;Launch this software&lt;/strong&gt; page appears (Figure 5).&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws05.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws05.png?itok=QvV813Xj" width="631" height="931" alt="The "Launch this software" page presents several configuration options." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 5: The "Launch this software" page presents several configuration options. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;3. Configure the EC2 Instance Type &lt;/strong&gt;in Figure 5. Choose the smallest available instance size: t2.medium.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;4. Configure the virtual private cloud (VPC) settings:&lt;/strong&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;If you don't have a VPC available in your region, click &lt;strong&gt;Create a VPC in EC2&lt;/strong&gt;. This will bring you to the &lt;strong&gt;Your VPCs&lt;/strong&gt; page (Figure 6).&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Click &lt;strong&gt;Create VPC&lt;/strong&gt;, then select &lt;strong&gt;VPC and more&lt;/strong&gt;. This choice creates the associated subnets, route tables, and network connections, as shown in Figure 7.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws07.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws07.png?itok=kYeNpGoA" width="1324" height="1049" alt="The VPC page displays the VPC, subnets, route tables, and network connections." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 7: The VPC page displays the VPC, subnets, route tables, and network connections. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Enter a name, such as &lt;code&gt;eap&lt;/code&gt; and a CIDR block. I used 10.0.0.0/16 for the CIDR block (a private IP subnet).&lt;/li&gt; &lt;li&gt;Set the &lt;strong&gt;Number of Availability Zones&lt;/strong&gt; and the &lt;strong&gt;Number of public subnets&lt;/strong&gt; to 1. Set the &lt;strong&gt;Number of private subnets&lt;/strong&gt; to 0. Ensure that &lt;strong&gt;Enable DNS hostnames&lt;/strong&gt; and &lt;strong&gt;Enable DNS resolution&lt;/strong&gt; are selected.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Create VPC&lt;/strong&gt; to create the VPC and associated interfaces. Once the Create VPC workflow is complete, you will see a list of resources like Figure 8.&lt;/li&gt; &lt;/ul&gt;&lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws08.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws08.png?itok=Gev9LDzd" width="563" height="431" alt="The VPC workflow page should show success for all resources." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 8: The VPC workflow page should show success for all resources. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;p&gt;&lt;strong&gt;5. Configure the subnet settings&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Here, you need to make a minor change to the subnet. Follow these steps:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Click the subnet link in Figure 8 to open the list of subnets (Figure 9).&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws09.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws09.png?itok=fsG9ioFZ" width="854" height="137" alt="The Subnets page shows one configured subnet." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 9: The Subnets page shows one configured subnet. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Click the subnet link.&lt;/li&gt; &lt;li&gt;Next, select &lt;strong&gt;Actions&lt;/strong&gt;,&lt;strong&gt; &lt;/strong&gt;and&lt;strong&gt; &lt;/strong&gt;then&lt;strong&gt; Edit subnet settings&lt;/strong&gt; to bring up the screen in Figure 10.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws10.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws10.png?itok=Hd_wv1xP" width="559" height="641" alt="A box labeled "Enable auto-assign public IPv4 address " appears near the top of the subnet settings." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 10: A box labeled "Enable auto-assign public IPv4 address " appears near the top of the subnet settings. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Ensure that &lt;strong&gt;Enable auto-assign public IPv4 address&lt;/strong&gt; is selected. This setting assigns an IP address to the network interface of any EC2 instance associated with this subnet.&lt;/li&gt; &lt;li&gt;Return to the &lt;strong&gt;Launch this instance&lt;/strong&gt; page and click the refresh icon on the &lt;strong&gt;VPC Settings&lt;/strong&gt; field. You should see your newly created &lt;strong&gt;VPC&lt;/strong&gt; and &lt;strong&gt;Subnet Settings&lt;/strong&gt; fields populated.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;strong&gt;6. Configure security group settings&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Click &lt;strong&gt;Create New Based on Seller Settings&lt;/strong&gt;. These settings, shown in Figure 11, include the ports recommended by Red Hat: 22 for SSH, 8080 as the default web front-end port, and 9990 as the default management port.&lt;/li&gt; &lt;/ul&gt;&lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws11.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws11.png?itok=E6fFjWyk" width="555" height="375" alt="Configure the security group settings." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 11: Configure the security group settings. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;You can enable public access to these ports by using 0.0.0.0 as the source IP. For example, you may wish to allow access to port 8080 from any IP address. For testing purposes, we recommend you restrict all access to your public IP address for this instance.&lt;/li&gt; &lt;li&gt;Select &lt;strong&gt;Custom&lt;/strong&gt; from the Source (IP or Group) to restrict access to your local machine. Then enter your public IP address and netmask in the format &lt;code&gt;&lt;em&gt;nnn.nnn.nnn.nnn&lt;/em&gt;/32&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt; to create this security group. The security group you create will be selected in &lt;strong&gt;Security Group Settings&lt;/strong&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;strong&gt;7. Configure Key Pair Settings&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt;&lt;li&gt;You can use this existing record if you already have a key pair generated and the key pair file available.&lt;/li&gt; &lt;li&gt;Otherwise, click &lt;strong&gt;Create a key pair in EC2&lt;/strong&gt; and navigate to the &lt;strong&gt;EC2→Network &amp; Security→Key Pairs&lt;/strong&gt; page.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Create Key Pair&lt;/strong&gt; and follow the instructions to create a new key pair. Your new private key file downloads to your local machine.&lt;/li&gt; &lt;li&gt;Return to the &lt;strong&gt;Launch this software&lt;/strong&gt; page and click the refresh icon in the &lt;strong&gt;Key Pair Settings&lt;/strong&gt; panel. Your new key pair should appear on the list for you to select.&lt;/li&gt; &lt;li&gt;Once you configure all the options in this form, you can launch your instance with the &lt;strong&gt;Launch&lt;/strong&gt; button. You will see the screen in Figure 12 showing the details of your new instance.&lt;/li&gt; &lt;/ul&gt;&lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws12.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws12.png?itok=6024_EXd" width="582" height="391" alt="The launch page shows the settings for your instance." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 12: The launch page shows the settings for your instance. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3&gt; &lt;/h3&gt; &lt;h3&gt;16 quick steps to create an instance using the AWS CLI&lt;/h3&gt; &lt;p&gt;You need to configure a VPC, subnet, security group, and key pair in AWS to deploy an instance of JBoss EAP on AWS using the AWS CLI. The commands in this section configure all the required objects. Then you can create a JBoss EAP EC2 instance and expose it to the public Internet following these steps.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;1. Create a VPC&lt;/strong&gt; with a 10.0.0.0/16 CIDR block through the following &lt;code&gt;create-vpc&lt;/code&gt; command. This command also stores the resulting ID in an environment variable named &lt;code&gt;VPCID&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export VPCID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query Vpc.VpcId --output text) &amp;&amp; echo $VPCID&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;2. Modify the VPC&lt;/strong&gt; to enable DNS hostnames:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 modify-vpc-attribute --vpc-id $VPCID --enable-dns-hostnames "{\"Value\":true}"&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;3. Create a subnet &lt;/strong&gt;with a 10.0.1.0/24 CIDR block using the following &lt;code&gt;create-subnet&lt;/code&gt; command. This command also stores the resulting ID in an environment variable named &lt;code&gt;SUBNET&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export SUBNETID=$(aws ec2 create-subnet --vpc-id $VPCID --cidr-block 10.0.1.0/24 --query Subnet.SubnetId --output text) &amp;&amp; echo $SUBNETID&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;4. Create an internet gateway&lt;/strong&gt; and store the ID in an environment variable named &lt;code&gt;GATEWAY&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export GATEWAY=$(aws ec2 create-internet-gateway --query InternetGateway.InternetGatewayId --output text) &amp;&amp; echo $GATEWAY&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;5. Attach the internet gateway&lt;/strong&gt; to your VPC using the following &lt;code&gt;attach-internet-gateway&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 attach-internet-gateway --vpc-id $VPCID --internet-gateway-id $GATEWAY&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;6. Create a custom route table&lt;/strong&gt; for your VPC using the following &lt;code&gt;create-route-table&lt;/code&gt; command, and store the route table ID in an environment variable named &lt;code&gt;ROUTETABLE&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export ROUTETABLE=$(aws ec2 create-route-table --vpc-id $VPCID --query RouteTable.RouteTableId --output text) &amp;&amp; echo $ROUTETABLE&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;7. Create a route&lt;/strong&gt; that points all traffic (0.0.0.0/0) to the internet gateway using the following &lt;code&gt;create-route&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 create-route --route-table-id $ROUTETABLE --destination-cidr-block 0.0.0.0/0 --gateway-id $GATEWAY&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;8. Associate&lt;/strong&gt; the route table with the subnet:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 associate-route-table --subnet-id $SUBNETID --route-table-id $ROUTETABLE&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;9. Modify&lt;/strong&gt; the subnet to assign a public IP address automatically:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 modify-subnet-attribute --subnet-id $SUBNETID --map-public-ip-on-launch&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;10. Create a new security group&lt;/strong&gt; and store the ID in an environment variable named &lt;code&gt;GROUPID&lt;/code&gt; by entering the following:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export SGROUPID=$(aws ec2 create-security-group --group-name eap-security2 --description "EAP security group" --vpc-id $VPCID --query GroupId --output text) &amp;&amp; echo $SGROUPID&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;11. Create another variable&lt;/strong&gt; with the public IP address of your local machine:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export IP=nnn.nnn.nnn.nnn&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;12. Add inbound rules&lt;/strong&gt; to this security group with the following commands:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 authorize-security-group-ingress --group-id $SGROUPID --protocol tcp --port 22 --cidr $IP/32 $ aws ec2 authorize-security-group-ingress --group-id $SGROUPID --protocol tcp --port 8080 --cidr $IP/32 $ aws ec2 authorize-security-group-ingress --group-id $SGROUPID --protocol tcp --port 9990 --cidr $IP/32&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;13.&lt;/strong&gt; If you need to create a key pair, enter the following command, which stores the private key in the &lt;code&gt;~/.ssh/eap-key.pem&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 create-key-pair --region us-east-1 --key-name "eap-key" | jq -r ".KeyMaterial" &gt; ~/.ssh/eap-key.pem&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;14. Restrict the permissions&lt;/strong&gt; for your key file:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ chmod 400 ~/.ssh/eap-key.pem&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;15.&lt;/strong&gt; Before you create the EC2 instance, you need to know the ID of the AMI to use. Find this ID through the AWS CLI with one of the following commands:&lt;/p&gt; &lt;ul&gt;&lt;li&gt; &lt;p&gt;For countries outside the EU:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export AMI=$(aws ec2 describe-images --filters 'Name=name,Values=RHEL-7-JBEAP*' 'Name=description,Values="Provided by Red Hat, Inc."' --query "Images[*].ImageId" --output text) &amp;&amp; echo $AMI&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For countries within the EU:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ export AMI=$(aws ec2 describe-images --filters 'Name=name,Values=RHEL-7-JBEAP*' 'Name=description,Values="Provided by Red Hat Limited."' --query "Images[*].ImageId" --output text) &amp;&amp; echo $AMI&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;strong&gt;16. Launch&lt;/strong&gt; an EC2 instance by entering the following:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 run-instances --image-id $AMI --count 1 --instance-type t2.medium --key-name eap-key --security-group-ids $SGROUPID --subnet-id $SUBNETID&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The response from this command gives the details of the EC2 instance (e.g., &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; &lt;h2&gt;Step 5: Connect to the EC2 instance&lt;/h2&gt; &lt;p&gt;To connect to your JBoss EAP on AWS, use SSH to connect to the public DNS name of your instance. Again, we will use the AWS management console and the AWS CLI.&lt;/p&gt; &lt;h3&gt;Connect via the AWS management console&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;Before you connect to your EC2 instance, you need to restrict the permissions on your local &lt;code&gt;.pem&lt;/code&gt; file. You might need to search for this file to find its directory:&lt;/li&gt; &lt;/ul&gt;&lt;pre&gt; &lt;code class="language-bash"&gt;$ chmod 400 eap-key.pem&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt;&lt;li&gt;To find the public DNS name of your instance from the AWS console, navigate to the AWS EC2 running instances page. You should see a list of active instances (Figure 13).&lt;/li&gt; &lt;/ul&gt;&lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws13.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws13.png?itok=Bgr59h2g" width="1135" height="285" alt="Find your EC2 instance on the Instances page." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 13: Find your EC2 instance on the Instances page. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;Select your instance to view the instance details (Figure 14).&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;On the page illustrated in Figure 14, click the &lt;strong&gt;Connect&lt;/strong&gt; button.&lt;/li&gt; &lt;li&gt;The next page displays options for connecting (Figure 15). Select the &lt;strong&gt;SSH client&lt;/strong&gt; tab.&lt;/li&gt; &lt;/ul&gt;&lt;p&gt; &lt;/p&gt; &lt;figure class="align-center" role="group"&gt;&lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt;&lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="https://developers.redhat.com/sites/default/files/jaws15.png" data-featherlight="image"&gt;&lt;img loading="lazy" src="https://developers.redhat.com/sites/default/files/styles/article_full_width_1440px_w/public/jaws15.png?itok=BkpaVxv0" width="842" height="681" alt="The "Connect to Instance" page gives the commands needed to connect." typeof="Image" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 15: The "Connect to Instance" page gives the commands needed to connect. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt;&lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt; &lt;/p&gt; &lt;ul&gt;&lt;li&gt;This page also shows the instructions for connecting to your EC2 instance (Figure 15).&lt;/li&gt; &lt;li&gt;Copy the example from the panel in the AWS console.&lt;/li&gt; &lt;li&gt;Run the &lt;code&gt;ssh&lt;/code&gt; command in your local terminal to connect via SSH.&lt;/li&gt; &lt;/ul&gt;&lt;h3&gt;Connect via the AWS CLI&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;Find the public DNS name of your instance using the AWS CLI by entering the following:&lt;/li&gt; &lt;/ul&gt;&lt;pre&gt; &lt;code class="language-bash"&gt;$ aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicDnsName" --filters "Name=instance-state-name,Values=running" "Name=image-id,Values='$AMI'" --output text&lt;/code&gt;&lt;/pre&gt; &lt;p class="Indent1"&gt;This command lists each running EC2 instance using the JBoss EAP AMI with the instance's public DNS name.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Store this value in a variable with the following command:&lt;/li&gt; &lt;/ul&gt;&lt;pre&gt; &lt;code class="language-bash"&gt;$ export PUBLICDNS=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicDnsName" --filters "Name=instance-state-name,Values=running" "Name=image-id,Values='$AMI'" --output text) &amp;&amp; echo $PUBLICDNS &lt;/code&gt;&lt;/pre&gt; &lt;ul&gt;&lt;li&gt;Connect to your instance via SSH with the following command:&lt;/li&gt; &lt;/ul&gt;&lt;pre&gt; &lt;code class="language-bash"&gt;$ ssh -i ~/.ssh/eap-key.pem ec2-user@$PUBLICDNS&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt;&lt;li&gt;Confirm when prompted to connect to a new host. Then, you will successfully connect to your instance.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;Step 6: Starting JBoss EAP&lt;/h2&gt; &lt;p&gt;Now that you can connect to your JBoss EAP EC2 instance, you can start the JBoss EAP server.&lt;/p&gt; &lt;ul&gt;&lt;li&gt;Run the following commands from an SSH session connected to your EC2 instance:&lt;/li&gt; &lt;/ul&gt;&lt;pre&gt; &lt;code class="language-bash"&gt;$ sudo su - $ echo "JAVA_OPTS=\"$JAVA_OPTS -Djboss.bind.address=0.0.0.0 -Djboss.bind.address.private=0.0.0.0 -Djboss.bind.address.management=0.0.0.0\"" &gt;&gt; /opt/rh/eap7/root/usr/share/wildfly/bin/standalone.conf $ systemctl start eap7-standalone&lt;/code&gt;&lt;/pre&gt; &lt;ul&gt;&lt;li&gt;Use your browser to navigate to the public DNS name of your EC2 instance on port 8080 (i.e., &lt;code&gt;http://&lt;public dns&gt;:8080&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;You will see the default home page for JBoss EAP displayed. From this page, you can access the administration console.&lt;/li&gt; &lt;li&gt;You must create an administrative user before you deploy applications. Follow the instructions in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.4/html-single/getting_started_guide/index#management_users"&gt;Red Hat JBoss EAP documentation&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;h2&gt;JBoss EAP service makes AWS deployments easy&lt;/h2&gt; &lt;p&gt;In this article, we illustrated how the JBoss EAP service makes AWS deployments of Java applications easy. You have learned how to provision a JBoss EAP on an AWS EC2 instance using the AWS console and the AWS CLI. In our next article, we will explore how to deploy a JBoss EAP application and connect it to an Amazon RDS MySQL database.&lt;/p&gt; &lt;p&gt;Please feel free to comment below. We welcome your questions and feedback.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/08/visual-guide-deploying-jboss-eap-aws" title="A visual guide to deploying JBoss EAP on AWS"&gt;A visual guide to deploying JBoss EAP on AWS&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Philip Hayes</dc:creator><dc:date>2022-11-08T11:00:00Z</dc:date></entry><entry><title>An introduction to debug events: Learn how to use breakpoints</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/11/08/introduction-debug-events-learn-how-use-breakpoints" /><author><name>Keith Seitz</name></author><id>84e3ee15-4367-4b75-aef8-1d3d5751cee2</id><updated>2022-11-08T07:00:00Z</updated><published>2022-11-08T07:00:00Z</published><summary type="html">&lt;p&gt;In previous articles on Red Hat Developer, I &lt;a href="https://developers.redhat.com/blog/2021/04/30/the-gdb-developers-gnu-debugger-tutorial-part-1-getting-started-with-the-debugger"&gt;introduced you to the GNU Debugger&lt;/a&gt; (GDB) and explained &lt;a href="https://developers.redhat.com/articles/2022/01/10/gdb-developers-gnu-debugger-tutorial-part-2-all-about-debuginfo"&gt;what every developer should know about debuginfo&lt;/a&gt;. This article begins a series that will cover the expansive topic of &lt;em&gt;debug events&lt;/em&gt;—that is, all the events to which GDB can respond. These include signals, breakpoints, watchpoints, syscalls, exceptions, and more. I'll be covering the commands and convenience variables and functions that will aid you in your endeavors to stop GDB at the right place at the right time.&lt;/p&gt; &lt;p&gt;A &lt;em&gt;breakpoint&lt;/em&gt; is the most useful of these events, so let me start there.&lt;/p&gt; &lt;h2&gt;What is a breakpoint?&lt;/h2&gt; &lt;p&gt;A breakpoint instructs the debugger to stop at a particular code location in the user's program, returning control of the debugger to them. The user may then inspect the application's state. Breakpoints are by far the most common type of debug event that developers use.&lt;/p&gt; &lt;p&gt;Under the covers, there are many ways to implement breakpoints, including inserting a trap or illegal instructions that cause the kernel to raise a signal which is then handled by the debugger. I'm not going to talk about the specifics of implementing breakpoints, but rather how to use breakpoints effectively.&lt;/p&gt; &lt;p&gt;In GDB, the &lt;code&gt;break&lt;/code&gt; command is used to set a breakpoint:&lt;/p&gt; &lt;pre&gt; (gdb) | help break | head -4 break, brea, bre, br, b Set breakpoint at specified location. break [PROBE_MODIFIER] [LOCATION] [thread THREADNUM] [-force-condition] [if CONDITION] &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here I've piped the output of &lt;code&gt;help break&lt;/code&gt; to the shell program &lt;code&gt;head&lt;/code&gt;. GDB supports a &lt;code&gt;pipe&lt;/code&gt; command (&lt;code&gt;|&lt;/code&gt; is an abbreviation) that allows users to pipe arbitrary output to any shell command. For more information, read about the &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Shell-Commands.html#index-pipe"&gt;pipe command&lt;/a&gt; in the GDB User's Manual, or consult GDB's online help (&lt;code&gt;help pipe&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;As you can see from this (truncated) help text, the &lt;code&gt;break&lt;/code&gt; command accepts several arguments and has several abbreviations (which I will use interchangeably throughout this article). Let's quickly explore these. (I'll defer discussion of probes for now.)&lt;/p&gt; &lt;h3&gt;Specifying a location&lt;/h3&gt; &lt;p&gt;If you read the help text for the &lt;code&gt;break&lt;/code&gt; command more closely, it explains that the &lt;em&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/em&gt; may be "a linespec, address, or explicit location." This argument is the one you will use the most. It is a conceptual "point" in your program at which you can instruct the debugger to stop your program and return control of the debugger to you. Let's take a look at each of these three types of location in turn.&lt;/p&gt; &lt;h4&gt;Linespec locations&lt;/h4&gt; &lt;p&gt;A &lt;em&gt;linespec location&lt;/em&gt; is a colon-separated list that includes a source file name, source line number, and function and/or label names. Some examples of these easily illustrate how this works:&lt;/p&gt; &lt;pre&gt; (gdb) # Set a breakpoint on the function main() (gdb) break main Breakpoint 1 at 0x4011a2: file factorial.c, line 21. (gdb) # Set a breakpoint on the twenty-third line of the file factorial.c (gdb) break factorial.c:23 Breakpoint 2 at 0x4011a8 file factorial.c&lt;, line 23. (gdb) # Set a breakpoint at the label error_exit in the function factorial() (gdb) break factorial:error_exit Breakpoint 3 at 0x40118c: file factorial.c, line 14. &lt;/pre&gt; &lt;h4&gt;Address locations&lt;/h4&gt; &lt;p&gt;An &lt;em&gt;address location&lt;/em&gt; is an exact address in the inferior (your running program), and they are easily recognized by the use of an asterisk. Address locations accept any valid expression as arguments:&lt;/p&gt; &lt;pre&gt; (gdb) # Set a breakpoint at the first instruction of the function main() (gdb) break *main Breakpoint 4 at 0x401193: file factorial.c, line 20. (gdb) # Set a breakpoint at the code address 0x401156 (gdb) b *0x401156 Breakpoint 5 at 0x401156 file factorial.c, line 6. (gdb) # Set a breakpoint at 16 bytes past main() (gdb) b *main + 16 Breakpoint 6 at factorial.c, line 21. &lt;/pre&gt; &lt;p&gt;Notice the distinction between &lt;code&gt;break main&lt;/code&gt; and &lt;code&gt;break *main&lt;/code&gt;. The address location (&lt;code&gt;*main&lt;/code&gt;) sets the breakpoint at the very first instruction of the function, which may be in a compiler-generated function prologue. The linespec location (&lt;code&gt;main&lt;/code&gt;) sets the breakpoint &lt;em&gt;after&lt;/em&gt; any function prologue—in other words, it sets the breakpoint at the first instruction of &lt;em&gt;your&lt;/em&gt; code.&lt;/p&gt; &lt;h4&gt;Explicit locations&lt;/h4&gt; &lt;p&gt;&lt;em&gt;Explicit locations&lt;/em&gt; allow users to unambiguously specify a location using key/value pairs. GDB's linespecs are ambiguous. When you type &lt;code&gt;A:B:C&lt;/code&gt;, GDB does not know whether &lt;code&gt;A&lt;/code&gt; represents a function or file name without doing file or function look-ups. When a linespec location is definitively parsed, GDB internalizes it into an explicit location, thereby removing all ambiguity and speeding location resolution. This can be very beneficial for large programs.&lt;/p&gt; &lt;p&gt;Users can also bypass the linespec parser by using explicit locations:&lt;/p&gt; &lt;pre&gt; (gdb) # Set a breakpoint on the function main() (gdb) break -func main Breakpoint 7 at 0x4011a2: file factorial.c, line 21. (gdb) # Set a breakpoint on the twenty-third line of the file factorial.c (gdb) break -source factorial.c -line 23 Breakpoint 8 at 0x4011a8: file factorial.c, line 23. (gdb) # Set a breakpoint at the label error_exit in the function factorial() (gdb) break -func factorial -label error_exit Breakpoint 9 at 0x40118c: file factorial.c, line 14. &lt;/pre&gt; &lt;h3&gt;Limiting breakpoints to a specific thread&lt;/h3&gt; &lt;p&gt;In multi-threaded programs, it is often desirable to limit breakpoints to a specific thread. This can be accomplished by supplying the &lt;code&gt;thread&lt;/code&gt; keyword and GDB's &lt;code&gt;&lt;em&gt;thread-id&lt;/em&gt;&lt;/code&gt; after the location. GDB will then only stop on the breakpoint if it is hit in the specified thread:&lt;/p&gt; &lt;pre&gt; (gdb) # Get a list of threads (gdb) info threads Id Target Id Frame * 1 Thread 0x7ffff7da2740 (LWP 1016086) "threaded" main (argc=1, argv=0x7fffffffd918) at threaded.c:44 2 Thread 0x7ffff7da1640 (LWP 1016089) "threaded" 0x00007ffff7e7d5b5 in clock_nanosleep@GLIBC_2.2.5 () from /lib64/libc.so.6 3 Thread 0x7ffff75a0640 (LWP 1016090) "threaded" 0x00007ffff7e7d5b5 in clock_nanosleep@GLIBC_2.2.5 () from /lib64/libc.so.6 4 Thread 0x7ffff6d9f640 (LWP 1016091) "threaded" 0x00007ffff7e7d5b5 in clock_nanosleep@GLIBC_2.2.5 () from /lib64/libc.so.6 5 Thread 0x7ffff659e640 (LWP 1016092) "threaded" 0x00007ffff7e7d5b5 in clock_nanosleep@GLIBC_2.2.5 () from /lib64/libc.so.6 6 Thread 0x7ffff5d9d640 (LWP 1016093) "threaded" 0x00007ffff7e7d5b5 in clock_nanosleep@GLIBC_2.2.5 () from /lib64/libc.so.6 (gdb) # Set a breakpoint on function foo() in thread #3 (gdb) break foo thread 3 Breakpoint 2 at 0x4011a1: file threaded.c, line 9. (gdb) continue Continuing. [Switching to Thread 0x7ffff75a0640 (LWP 3584523)] Thread 3 "threaded" hit Breakpoint 2, foo (num=1) at threaded.c:9 9 printf("%d: here I am!\n", num); (gdb) p $_thread $1 = 3 &lt;/pre&gt; &lt;p&gt;Notice the use of a &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Convenience-Vars.html#index-convenience-variables"&gt;convenience variable&lt;/a&gt; to output the currently focused thread (&lt;code&gt;$_thread&lt;/code&gt;). GDB defines a number of convenience variables and functions, and you can also define your own variables and functions (even in Python). Look for a future article discussing this useful feature.&lt;/p&gt; &lt;h3&gt;Specifying a breakpoint condition&lt;/h3&gt; &lt;p&gt;You can also specify that GDB should stop on a breakpoint only when some expression in the inferior evaluates as true. This is especially useful when a function is called many times during the execution of your program and you want to stop for one specific condition, such as when a variable (either a function parameter or a local variable) evaluates to a specified value.&lt;/p&gt; &lt;p&gt;Consider a function that computes the factorial of a number recursively, declared &lt;code&gt;int factorial (int n);&lt;/code&gt;. Here's how you would tell GDB to stop whenever the parameter &lt;code&gt;n&lt;/code&gt; is 2:&lt;/p&gt; &lt;pre&gt; (gdb) # Stop when computing factorial (2) (gdb) b factorial if n == 2 Breakpoint 10 at 0x401161: file factorial.c, line 7. (gdb) r 8 Starting program: /home/keiths/factorial 8 [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib64/libthread_db.so.1". Breakpoint 10, factorial (n=2) at factorial.c:7 7 if (n &gt; 10) (gdb) p n $1 = 2 &lt;/pre&gt; &lt;p&gt;To remove a condition from a breakpoint, simply set a new, blank condition on it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;-force-condition&lt;/code&gt; flag tells GDB to set the condition even though it may not be evaluated at that time. This is useful, for example, if a variable used in the condition cannot be evaluated in the scope of the breakpoint's location but will in the future due to a library load.&lt;/p&gt; &lt;h3&gt;Multi-location breakpoints and -qualified&lt;/h3&gt; &lt;p&gt;By default, GDB will search all scopes to find a location when setting a breakpoint on a function. For example, &lt;code&gt;break method&lt;/code&gt; will search all scopes to find a function or method named &lt;code&gt;method&lt;/code&gt;. GDB will then set a breakpoint at every location found:&lt;/p&gt; &lt;pre&gt; (gdb) b method Breakpoint 1 at 0x40110a: method. (9 locations) (gdb) info break Num Type Disp Enb Address What 1 breakpoint keep y &lt;MULTIPLE&gt; 1.1 y 0x000000000040110a in method() at ov.cc:57 1.2 y 0x00000000004011de in a&lt;a&lt;int&gt; &gt;::method() at ov.cc:10 1.3 y 0x00000000004011ea in a&lt;b&lt;int&gt; &gt;::method() at ov.cc:10 1.4 y 0x00000000004011f6 in c&lt;c&lt;int&gt; &gt;::method() at ov.cc:22 1.5 y 0x0000000000401202 in c&lt;d&lt;int&gt; &gt;::method() at ov.cc:22 1.6 y 0x000000000040123e in A&lt;a&lt;b&lt;int&gt; &gt;, c&lt;d&lt;int&gt; &gt; &gt;::method() at ov.cc:34 1.7 y 0x0000000000401250 in A&lt;a&lt;b&lt;int&gt; &gt;, a&lt;a&lt;int&gt; &gt; &gt;::method() at ov.cc:34 1.8 y 0x0000000000401262 in A&lt;a&lt;b&lt;int&gt; &gt;, a&lt;b&lt;int&gt; &gt; &gt;::method() at ov.cc:34 1.9 y 0x0000000000401274 in B&lt;a&lt;b&lt;int&gt; &gt;, c&lt;d&lt;int&gt; &gt; &gt;::method() at ov.cc:40 &lt;/pre&gt; &lt;p&gt;In the above example, GDB has set nine different breakpoints for the requested function &lt;code&gt;method()&lt;/code&gt;, a method that is defined in several different classes/structures and one function. If you want to exclude one of these locations from triggering a break, simply disable it with &lt;code&gt;disable &lt;em&gt;break-id&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;&lt;code&gt;break-id&lt;/code&gt;&lt;/em&gt; is one of the numbered breakpoint locations listed in the above table—&lt;code&gt;1.6&lt;/code&gt;, for example.&lt;/p&gt; &lt;p&gt;Whenever a condition is used when setting a breakpoint with multiple locations, only those locations in which the condition is valid will actually result in a breakpoint. All other locations will be ignored.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;-qualified&lt;/code&gt; flag to tell GDB that you are looking for an exact match:&lt;/p&gt; &lt;pre&gt; (gdb) break -qualified method Breakpoint 2 at 0x40110a: file ov.cc, line 57. (gdb) info break Num Type Disp Enb Address What 2 breakpoint keep y 0x000000000040110a in method() at ov.cc:57 &lt;/pre&gt; &lt;h3&gt;Other useful breakpoint information, commands, and variables&lt;/h3&gt; &lt;p&gt;No discussion of breakpoints is complete without mentioning several adjacent commands and convenience variables associated with breakpoints.&lt;/p&gt; &lt;h4&gt;Print the breakpoint table&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;info breakpoints&lt;/code&gt; command prints the current list of user-defined breakpoints and other breakpoint-related information (conditions, thread, and ignore count):&lt;/p&gt; &lt;pre&gt; (gdb) info break Num Type Disp Enb Address What 11 breakpoint keep y 0x0000000000401161 in factorial at factorial.c:7 stop only if n == 2 12 breakpoint keep y 0x00000000004011a2 in main at factorial.c:21 breakpoint already hit 1 time &lt;/pre&gt; &lt;p&gt;If you want to output GDB's list of internal breakpoints, use &lt;code&gt;maint info break&lt;/code&gt; instead.&lt;/p&gt; &lt;h4&gt;Set a conditional breakpoint&lt;/h4&gt; &lt;p&gt;&lt;code&gt;cond &lt;em&gt;break-id&lt;/em&gt; &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt; is an alternative form of &lt;code&gt;break &lt;em&gt;location&lt;/em&gt; if &lt;em&gt;expression&lt;/em&gt;&lt;/code&gt;. If you forgot to set a conditional for your breakpoint, you can set it after the fact with the &lt;code&gt;cond&lt;/code&gt; command.&lt;/p&gt; &lt;h4&gt;Last created &lt;em&gt;break-id&lt;/em&gt;&lt;/h4&gt; &lt;p&gt;When you create a new breakpoint, its &lt;em&gt;&lt;code&gt;break-id&lt;/code&gt;&lt;/em&gt; will be saved in the convenience variable &lt;code&gt;$bpnum&lt;/code&gt;. This can be passed to other commands, convenience functions, and so on.&lt;/p&gt; &lt;pre&gt; (gdb) # These are equivalent (gdb) break factorial if n == 2 Breakpoint 13 at 0x401161: file factorial.c, line 7. (gdb) break factorial Note: breakpoint 13 also set at pc 0x401161. Breakpoint 14 at 0x401161: file factorial.c, line 7. (gdb) cond $bpnum n == 2 (gdb) info break Num Type Disp Enb Address What 13 breakpoint keep y 0x0000000000401161 in factorial at factorial.c:7 stop only if n == 2 14 breakpoint keep y 0x0000000000401161 in factorial at factorial.c:7 stop only if n == 2 &lt;/pre&gt; &lt;h4&gt;Automatically execute commands at a breakpoint&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;commands [&lt;em&gt;break-id&lt;/em&gt;]&lt;/code&gt; command instructs GDB to execute a series of debugger commands when breakpoint &lt;em&gt;&lt;code&gt;break-id&lt;/code&gt;&lt;/em&gt; is hit. If no argument is supplied, this command acts on the last one set—that is, as if &lt;code&gt;$bpnum&lt;/code&gt; had been specified. Commands to execute are entered, one per line, terminating with &lt;code&gt;end&lt;/code&gt;. For example, the following will print a simple message to the terminal whenever a breakpoint at &lt;code&gt;main()&lt;/code&gt; is hit:&lt;/p&gt; &lt;pre&gt; (gdb) b main Breakpoint 4 at 0x4011a2: file factorial.c, line 21. (gdb) commands Type commands for breakpoint(s) 4, one per line. End with a line saying just "end". &gt;printf "ARGC = %d\n", argc &gt;end (gdb) r Starting program: /home/keiths/factorial [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib64/libthread_db.so.1". Breakpoint 1, main (argc=1, argv=0x7fffffffd918) at factorial.c:21 21 if (argc != 2) ARGC = 1 &lt;/pre&gt; &lt;p&gt;As you may have gathered from this listing, GDB has its own built-in &lt;code&gt;printf&lt;/code&gt;-like function (conveniently called &lt;code&gt;printf&lt;/code&gt;). Semantically, this function behaves exactly the same as your beloved C version. For more information, see &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Output.html#index-printf"&gt;printf command&lt;/a&gt; in the GDB User's Manual, or consult GDB's online help (&lt;code&gt;help printf&lt;/code&gt;).&lt;/p&gt; &lt;h4&gt;Ignore the next set number of hits of a breakpoint&lt;/h4&gt; &lt;p&gt;Notice the message &lt;code&gt;breakpoint already hit 1 time&lt;/code&gt; in the output of &lt;code&gt;info break&lt;/code&gt; above. GDB keeps a running count of the number of times a breakpoint has been hit. Along with the &lt;code&gt;ignore&lt;/code&gt; command, this opens a powerful way to fine-tune when a breakpoint stops your application, which you can invoke with the &lt;code&gt;ignore &lt;em&gt;break-id&lt;/em&gt; &lt;em&gt;count&lt;/em&gt;&lt;/code&gt; command. &lt;code&gt;ignore&lt;/code&gt; tells GDB to simply ignore the next &lt;em&gt;&lt;code&gt;count&lt;/code&gt;&lt;/em&gt; hits of the breakpoint that has the ID &lt;em&gt;&lt;code&gt;break-id&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Consider the following (very) contrived source code, which will abort when the global variable &lt;code&gt;n&lt;/code&gt; reaches 1,000:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-cs"&gt;#include &amp;lt;stdlib.h&amp;gt; static int n; void called_often (void) { if (n == 1000) abort (); } int main (void) { for (n = 0; n &lt; 1001; ++n) called_often (); return EXIT_SUCCESS; }&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;One way to stop at the desired call of &lt;code&gt;called_often&lt;/code&gt; (at the right time) is to use the obvious breakpoint condition &lt;code&gt;n == 1000&lt;/code&gt;. Why your application is crashing is seldom this easy to understand, though. That's why you are using a debugger after all!&lt;/p&gt; &lt;p&gt;A useful trick here is to use the &lt;code&gt;commands&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; commands together to stop you at the right spot. First, figure out what ignore count you need to use. Here, we &lt;em&gt;silence&lt;/em&gt; the breakpoint so that we don't have to see 1,000 "breakpoint hit" messages.&lt;/p&gt; &lt;pre&gt; (gdb) break called_often Breakpoint 1 at 0x40112a: file ncrash.c, line 8. (gdb) commands Type commands for breakpoint(s) 1, one per line. End with a line saying just "end". &gt;silent &gt;continue &gt;end (gdb) r Starting program: /home/keiths/ncrash [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib64/libthread_db.so.1". Program received signal SIGABRT, Aborted. 0x00007ffff7e33c4c in __pthread_kill_implementation () from /lib64/libc.so.6 (gdb) info break Num Type Disp Enb Address What 1 breakpoint keep y 0x000000000040112a in called_often at ncrash.c:8 breakpoint already hit 1001 times silent continue &lt;/pre&gt; &lt;p&gt;Notice that GDB says &lt;code&gt;breakpoint already hit 1001 times&lt;/code&gt;. So it was on the one-thousand-first time this breakpoint was hit that the application crashed. That means we want to ignore the first 1,000 hits of this breakpoint. GDB should then stop exactly before the "crash" happens:&lt;/p&gt; &lt;pre&gt; (gdb) ignore 1 1000 Will ignore next 1000 crossings of breakpoint 1. (gdb) # We don't need or want the breakpoint to be silent anymore! (gdb) commands Type commands for breakpoint(s) 1, one per line. End with a line saying just "end". &gt;end (gdb) r The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /home/keiths/ncrash [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib64/libthread_db.so.1". Breakpoint 1, called_often () at ncrash.c:8 8 if (n == 1000) (gdb) p n $1 = 1000 &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are stopped at a breakpoint, you can also give an ignore count to the &lt;code&gt;continue&lt;/code&gt; command.&lt;/p&gt; &lt;h4&gt;Delete a breakpoint by break-id or location&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;delete breakpoints [&lt;em&gt;break-id&lt;/em&gt;]&lt;/code&gt; and &lt;code&gt;clear &lt;em&gt;LOCATION&lt;/em&gt;&lt;/code&gt; commands both delete breakpoints. &lt;code&gt;delete breakpoints&lt;/code&gt; (or simply &lt;code&gt;delete&lt;/code&gt;) takes GDB's breakpoint ID as its argument. &lt;code&gt;clear&lt;/code&gt; takes the event location (linespec, address, or explicit location) as its argument:&lt;/p&gt; &lt;pre&gt; (gdb) info break Num Type Disp Enb Address What 1 breakpoint keep y 0x00000000004011a2 in main at factorial.c:21 2 breakpoint keep y 0x0000000000401161 in factorial at factorial.c:7 (gdb) delete 2 (gdb) clear factorial.c:21 Deleted breakpoint 1 (gdb) info break No breakpoints or watchpoints. &lt;/pre&gt; &lt;h4&gt;Set a breakpoint on a regular expression&lt;/h4&gt; &lt;p&gt;&lt;code&gt;rbreak &lt;em&gt;regexp&lt;/em&gt;&lt;/code&gt; sets a breakpoint on each function that matches the given regular expression. Each of these essentially acts as if you had used &lt;code&gt;break&lt;/code&gt; on the matching function name. This command may set multiple breakpoints with multiple locations. This is a very expensive operation to perform in large applications, so use it wisely!&lt;/p&gt; &lt;h4&gt;Temporarily disable or enable a breakpoint&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;disable&lt;/code&gt; and &lt;code&gt;enable&lt;/code&gt; commands can temporarily disable or enable a breakpoint, respectively. A disabled breakpoint will simply be ignored by the debugger, and your application will not stop at it until it is re-enabled.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; A useful debugging trick is to break at a function only after some other function has executed. For example, this is how you'd stop in the function &lt;code&gt;common_function&lt;/code&gt; only after the function &lt;code&gt;precursor&lt;/code&gt; has executed:&lt;/p&gt; &lt;pre&gt; (gdb) # Set breakpoints at both locations (gdb) break common_function Breakpoint 1 at 0x40110a: file common.c, line 4. (gdb) break precursor Breakpoint 2 at 0x401111: file common.c, line 10. (gdb) # Disable the commonly called function (gdb) dis 1 (gdb) # When the break at `precursor' is hit, have it re-enable the other breakpoint (gdb) # We'll not silence this so that we can see that the breakpoint was hit. (gdb) commands 2 Type commands for breakpoint(s) 2, one per line. End with a line saying just "end". &gt;enable 1 &gt;continue &gt;end (gdb) # Now GDB will only stop in `common_function' after `precursor' is executed. (gdb) # To re-disable Breakpoint 1 whenever re-running, use a hook: (gdb) define hook-run Type commands for definition of "hook-run". End with a line saying just "end". &gt;disable 1 &gt;end (gdb) r The program being debugged has been started already. Start it from the beginning? (y or n) y Starting program: /home/keiths/common [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib64/libthread_db.so.1". Breakpoint 2, precursor () at common.c:10 10 return; Breakpoint 1, common_function () at common.c:4 4 return; &lt;/pre&gt; &lt;p&gt;Note that I've used a &lt;em&gt;hook&lt;/em&gt; here to "automate" the disabling of Breakpoint 1. Since that breakpoint was left enabled, it would stop the debugger at the first hit when we re-run the application. So we need to ensure that it is re-disabled. Any command in GDB can be "hooked" in this fashion. For more information, see &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb/Hooks.html"&gt;User-defined command hooks&lt;/a&gt; in the GDB User's Manual.&lt;/p&gt; &lt;h4&gt;Save breakpoints to a file&lt;/h4&gt; &lt;p&gt;If you've set up a bunch of breakpoints with conditions, ignore counts, and/or commands, it can be a real nuisance to manually write out a script file to restore your session. Let GDB do it for you! &lt;code&gt;save breakpoints &lt;em&gt;filename&lt;/em&gt;&lt;/code&gt; will save all of your breakpoints into the given named file, which will be a simple GDB script. Whenever you would like to restore your breakpoints, simply &lt;code&gt;source&lt;/code&gt; this file into GDB.&lt;/p&gt; &lt;h4&gt;Set a temporary breakpoint&lt;/h4&gt; &lt;p&gt;&lt;code&gt;tbreak &lt;em&gt;LOCATION&lt;/em&gt;&lt;/code&gt; is similar to the normal &lt;code&gt;break&lt;/code&gt; command, but it sets a &lt;em&gt;temporary&lt;/em&gt; breakpoint at the specified location (with possible condition, thread, and so on). The first time the breakpoint is hit, GDB will automatically delete it.&lt;/p&gt; &lt;h2&gt;Next up&lt;/h2&gt; &lt;p&gt;I've attempted to present the basics of GDB's breakpoint facilities, including some tips and tricks on how to streamline your time getting your application stopped at exactly the right place and time.&lt;/p&gt; &lt;p&gt;In the next article in this series, I will continue to dive into debug events by discussing how GDB handles signals and how you can tweak this handling to suit your needs.&lt;/p&gt; &lt;p&gt;Do you have a suggestion or tip related to breakpoints or a suggestion for a future topic about how to use GDB? Leave a comment on this article and share your idea with us.&lt;/p&gt; The post &lt;a href="https://developers.redhat.com/articles/2022/11/08/introduction-debug-events-learn-how-use-breakpoints" title="An introduction to debug events: Learn how to use breakpoints"&gt;An introduction to debug events: Learn how to use breakpoints&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;</summary><dc:creator>Keith Seitz</dc:creator><dc:date>2022-11-08T07:00:00Z</dc:date></entry></feed>
