package ca.cidco.csb.ppp;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import ca.cidco.csb.surveydata.Position;

public class NrcanPPP {
    //Path to NRCAN script	
	private static String pppPath= "/home/dominic/eclipse_ubx/csrs_ppp_auto_v1_6_1/csrs_ppp_auto.py";
	private static String nrcanUsername= "dominic.gonthier@cidco.ca";
	
	
	public static PppFile fetchPPP(String ubxFilePath) throws Exception{		
		
		System.err.println("Converting UBX file " + ubxFilePath);

		// Get file in commandline argument
        File ubxFile = new File(ubxFilePath);
        String fileName= ubxFile.getName();
        String nameNoExt= fileName.replaceAll(".ubx", "");
        nameNoExt = nameNoExt.replaceAll("\\.", "_");
        String ubxFileDirectory= ubxFile.getParent();
        
        // Make working directory and sub-directories 
        String workingDirectoryName 	= ubxFileDirectory + File.separator + nameNoExt;
        String directoryRinexName 		= ubxFileDirectory + File.separator + nameNoExt + File.separator + "Rinex";
        String pppDirectoryName 		= ubxFileDirectory + File.separator + nameNoExt + File.separator + "ppp";
        
        File workingDirectory = new File(workingDirectoryName);
        File directoryRinex = new File(directoryRinexName);
        File directoryPpp = new File(pppDirectoryName);
        
        ArrayList<File> toMake = new ArrayList<File>(Arrays.asList(workingDirectory, directoryRinex, directoryPpp));
        
        for (File file : toMake) {
        	file.mkdir();
        }
/*
        // Use convbin to generate .obs file      
        System.err.println("Generating OBS file in " + directoryRinexName);
        ProcessBuilder processObsBuilder= new ProcessBuilder("convbin", "-r", "ubx","-d", directoryRinexName, ubxFilePath);
        processObsBuilder.inheritIO();
        Process processOBS= processObsBuilder.start();
        processOBS.waitFor();
        
        // Send .obs to NRCAN
        System.err.println("Fetching PPP data from NRCAN in " + pppDirectoryName);
        
        //Rename OBS file to avoid name-chopping by NRCAN's PPP service
        String oldObsFileName = directoryRinexName + File.separator + fileName.replaceAll(".ubx", "")+".obs";
        String newObsFileName = directoryRinexName + File.separator + nameNoExt+".obs";
        File oldObs = new File(oldObsFileName);
        File newObs = new File(newObsFileName);
        oldObs.renameTo(newObs);
      
        //Send it
        ProcessBuilder processBuilderPPP = new ProcessBuilder("python3", pppPath,"--user_name",nrcanUsername, "--rnx", newObsFileName, "--results_dir", pppDirectoryName);
        processBuilderPPP.inheritIO();
        Process processPPP= processBuilderPPP.start();
        processPPP.waitFor();		
        
        //unzip NRCAN file
        String zipFilePath = pppDirectoryName + File.separator + nameNoExt + "_full_output.zip";
        System.err.println("Unzipping PPP results in " + zipFilePath);
        
        ZipInputStream zipIn = new ZipInputStream(new FileInputStream(zipFilePath));
        ZipEntry entry = zipIn.getNextEntry();
        
        // iterates over entries in the zip file
        while (entry != null) {
            String filePath = pppDirectoryName + File.separator + entry.getName();
            if (!entry.isDirectory()) {
                // if the entry is a file, extracts it
                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));
                byte[] bytesIn = new byte[4096];
                int read = 0;
                while ((read = zipIn.read(bytesIn)) != -1) {
                    bos.write(bytesIn, 0, read);
                }
                bos.close();
            } else {
                // if the entry is a directory, make the directory
                File dir = new File(filePath);
                dir.mkdirs();
            }
            zipIn.closeEntry();
            entry = zipIn.getNextEntry();
        }
        zipIn.close();        
*/       
        //Extract PPP data
        String pppPosFileName = pppDirectoryName + File.separator + nameNoExt + ".pos";
        
        File pppFile = new File(pppPosFileName);

        PppFile ppp = new PppFile();

//      Finding heading row
		try (FileReader fileReaderData = new FileReader(pppFile)) {
			BufferedReader bufferedReader = new BufferedReader(fileReaderData);
			String row;
			String[] split_row;			
        		
    		while ((row = bufferedReader.readLine()) !=null )  {
//    			System.out.println(" While pour le header");
    			split_row= row.split("[\\s]{1,}");
    			if(split_row[0].equalsIgnoreCase("DIR")){
    				break;
				}
			}
    		
//    		Match header row with the right pos_format (NRCan return)
    		PppHeader header = new PppHeader(row); //now, header.
    		
//    		System.out.println(header.toString());  // using to debug when no match
    		while ((row = bufferedReader.readLine()) !=null )  {

    			split_row= row.split("[\\s]{1,}");
				if(split_row[0].equalsIgnoreCase("FWD")|split_row[0].equalsIgnoreCase("FIN")|split_row[0].equalsIgnoreCase("FIX")){
					try {
						//TODO: parser avec SimpleDateFormat
//						
						String dateTime= split_row[header.getDateIndex()] + split_row[header.getTimeIndex()];
						System.out.println(dateTime);
						
						String format = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS";
//
						DateFormat df = new SimpleDateFormat(format, Locale.CANADA);
						Timestamp timestamp = (Timestamp) df.parse(dateTime);
//
//						SimpleDateFormat df2 = new SimpleDateFormat();
						System.out.println(timestamp +"  "+ timestamp.toString());
//						
//						Timestamp timestamp = parser(split_row[header.getDate() et split_row[header.getTime()]]);
//						Timestamp.valueOf("2018-11-12 01:02:03.123456789")
//						Long numberopfSatellites = parser(split_row[header.getNsv()]);
//						
//						Position position= new Position(timestamp, longitude,latitude,ellipsoidalHeight,sdLatitude,sdLongitude,sdHeight,numberOfSatellites,gdop);
//						
//						ppp.add(position);
					}
					catch(Exception e) {
						//invalid line, skip it
					}
				}
    		}
		}
		
		catch (IOException e) {
			e.printStackTrace();
			}

  
        System.err.println("PPP done");

        return ppp;
	}
}