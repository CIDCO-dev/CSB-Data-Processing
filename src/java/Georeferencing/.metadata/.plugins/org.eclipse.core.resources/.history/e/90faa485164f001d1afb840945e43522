package ca.cidco.csb.surveyplatform.hydroblock;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import ca.cidco.csb.ppp.NrcanPPP;
import ca.cidco.csb.ppp.PppFile;
import ca.cidco.csb.surveydata.Attitude;
import ca.cidco.csb.surveydata.Depth;
import ca.cidco.csb.surveydata.Position;

public class Hydroblock20 {
	private ArrayList<Position> positions;
	private ArrayList<Attitude> attitudes;
	private ArrayList<Depth>	depths;
	
	public Hydroblock20(String imuPath ) {//, String sonarPath, String ubxPath) {
		ArrayList<Attitude> attitudes = new ArrayList<Attitude>();

//		try {
//			read(sonarPath);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		try {
			readImu(imuPath);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
////		PppFile ppp = new PppFile();
//		try {
//			ppp = NrcanPPP.fetchPPP(ubxPath);
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		positions= ppp.getPositions();
		
		
	}
	
	public void readImu(String dataPath) throws Exception{ 
		//TODO
		if (dataPath.contains("imu")) {
			File imuFile = new File(dataPath);

			try (FileReader fileReaderData = new FileReader(imuFile)) {
				BufferedReader bufferedReader = new BufferedReader(fileReaderData);
				String row;
				String[] split_row;	
				
				
				while ((row = bufferedReader.readLine()) !=null )  {

	    			split_row= row.split("[;]{1}");
	    			
	    			//skip header
					if(split_row[0].contains("Timestamp")){
						//do nothing
					}
					else {
						try {
							
							//Make timestamp with SimpleDateFormat
							SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
							String dateTime= split_row[0];
						    java.util.Date parsedDate = dateFormat.parse(dateTime);
						    Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
							
							Double heading = Double.valueOf(split_row[1]); 
							Double pitch = Double.valueOf(split_row[2]); 
							Double roll = Double.valueOf(split_row[3]);

//						    built attitude with each rows and add them to attitudes
							Attitude attitude = new Attitude(timestamp, heading, pitch, roll);
							System.err.println(attitude.toString());
							attitudes.add(attitude);
							
						}
						catch (Exception e) {
							System.err.println("Can not built Attitude with : "+row);
							e.printStackTrace();
								}
					}


				}
			}
			catch (Exception e) {
				e.printStackTrace();
			}
		}
		else {
			System.err.println("This is not a IMU file");
		}
	}
/*		
		else {
			if (dataPath.contains("sonar")) {
				File sonarFile = new File(dataPath);

				try (FileReader fileReaderData = new FileReader(sonarFile)) {
					BufferedReader bufferedReader = new BufferedReader(fileReaderData);
					String row;
					String[] split_row;	
					 
					
					while ((row = bufferedReader.readLine()) !=null )  {

		    			split_row= row.split("[;]{1}");
		    			
		    			//skip header
						if(split_row[0].contains("Timestamp")){
							//do nothing
						}
						else {
							try {
								
								//Make timestamp with SimpleDateFormat
								SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
								String dateTime= split_row[0];
							    java.util.Date parsedDate = dateFormat.parse(dateTime);
							    Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
								
								Double depth_ = Double.valueOf(split_row[1]); 


//							    built attitude with each rows and add them to attitudes
								Depth depth = new Depth(timestamp, depth_);
								depths.add(depth);
								
							}
							catch (Exception e) {
								System.err.println("Can not built Depth with : "+row);
								e.printStackTrace();
							}
						}


					}

				}
				catch (Exception e) {
					e.printStackTrace();
				}
			}
			else {
				//not sonar file
			}
		}
		
	}
*/

	public ArrayList<Position> getPositions() {
		return positions;
	}


	public void setPositions(ArrayList<Position> positions) {
		this.positions = positions;
	}


	public ArrayList<Attitude> getAttitudes() {
		return attitudes;
	}


	public ArrayList<Depth> getDepths() {
		return depths;
	}
	
	
}
