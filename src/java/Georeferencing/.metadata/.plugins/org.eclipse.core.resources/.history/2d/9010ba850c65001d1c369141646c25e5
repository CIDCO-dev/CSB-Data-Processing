package ca.cidco.csb.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.sql.Timestamp;
import java.util.Date;

import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.junit.Test;

import ca.cidco.csb.georeference.BathymetryPoint;
import ca.cidco.csb.georeference.ErsGeoreferencing;
import ca.cidco.csb.surveydata.Attitude;
import ca.cidco.csb.surveydata.Depth;
import ca.cidco.csb.surveydata.Position;

public class GeoreferencingTest {

	
	@Test
	public void testGeoreferencePositionOnly() {
		try {
			Timestamp t = new Timestamp(new Date().getTime());
			
			
			Position    testPosition 	= buildPosition(t);
			Attitude 	testAttitude 	= buildAttitude(t);
			testAttitude.setRoll(0.0);
			testAttitude.setPitch(0.0);
			testAttitude.setHeading(0.0);
			Depth 		testDepth 		= buildDepth(t);
			testDepth.setDepth(0.0);
			
			RealVector leverArm = new ArrayRealVector(new double[]{0,0,0}); 
			
			ErsGeoreferencing geo = new ErsGeoreferencing(leverArm);
	
			BathymetryPoint sounding = geo.georeference(testPosition, testAttitude, testDepth);
		
			assertEquals("Latitude values incorrect",48.1000251,sounding.getLatitude(),	0.001); // 10m  48.09993387015833
			assertEquals("Longitude values incorrect",-68.0999966,sounding.getLongitude(),	0.001);  //14m   -68.9986792761534
			assertEquals("Height values incorrect",20,sounding.getEllipsoidalHeight(),	0.00001); // donne -17.755644478835166
		}
		catch(Exception e) {
			fail(e.getMessage());	 
		}
	}



	
	Position buildPosition(Timestamp t) {
		Double latitude = 48.1;
		Double longitude = -68.1;
		Double ellipsoidalHeight = 20.0;
		Double sdLatitude = 0.1;
		Double sdLongitude = 0.1;
		Double sdHeight = 0.1;
		int nsv = 32;
		Double gdop = 3.0;
		
		return new Position(t, latitude, longitude, ellipsoidalHeight, sdLatitude, sdLongitude, sdHeight, nsv, gdop);
	}
	
	Attitude buildAttitude(Timestamp t) {
		Double heading = 45.0;
		Double pitch   = 45.0;
		Double roll    = 45.0;
		
		return new Attitude(t, heading, pitch, roll);
	}
	
	Depth buildDepth(Timestamp t) {
		Double depth = 100.0;
		return new Depth(t,depth);
	}

}
