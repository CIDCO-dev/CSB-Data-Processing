package ca.cidco.csb.utilities;

import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;

public class Geodesy {
	
	final static double PI = 3.14159265358979323846;
	final static double a = 6378137.0; //demi grand axe (WGS84) meters 
	final static double e = 0.081819190842622; //first eccentricity (WGS84)
	final static double e2 = Math.pow(e, 2); // eccentricity squared
	

	/**
	 * Transform ECEF geographic coordinates to cartesian
	 */
	public RealVector LatLonH_2_ECEF(double lat, double lon, double h){
		
		
//		// Transformation of lon, lat, h to TRF
		double N = a/Math.sqrt( 1 - Math.pow(e*Math.sin(lat),2) );
//		System.out.println("N: "+N );

		double x = (N + h)*Math.cos(lat)*Math.cos(lon);
		double y = (N + h)*Math.cos(lat)*Math.sin(lon);
		double z = (N*(1-Math.pow(e,2)) + h)*Math.sin(lat);

		System.out.println("x: "+x +"	y: "+y+"	z: "+z);
		return new ArrayRealVector(new double[] { x, y, z });
	}
	
	/**
	 * Transform ECEF geographic coordinates to cartesian
	 * Convert latitude, longitude, height in WGS84 to ECEF X,Y,Z
	 * latitude and longitude given in decimal degrees.
	 * Height should be given in meters
	 */
	public RealVector LLH_2_ECEF (double latitude, double longitude, double h) {
		
		  double lat = latitude/180*PI; // converting to radians
		  double lon = longitude/180*PI; // converting to radians
		 
		  double chi = Math.sqrt(1-e2*Math.pow(Math.sin(lat),2));
		  
		  double X = (a/chi +h)*Math.cos(lat)*Math.cos(lon);
		  double Y = (a/chi +h)*Math.cos(lat)*Math.sin(lon);
		  double Z = (a*(1-e2) /chi + h)*Math.sin(lat);
		  
		  return new ArrayRealVector(new double[] { X, Y, Z });
	}
//	
}
