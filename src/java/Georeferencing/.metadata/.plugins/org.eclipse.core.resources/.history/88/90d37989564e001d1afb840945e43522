package ca.cidco.csb.ppp;

import java.io.BufferedReader;
import java.io.FileReader;
import java.math.BigDecimal;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Copyright 2017 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés
 */
/*

import ca.cidco.depthstar.project.surveyplatform.postprocessedposition.PostProcessedPosition;
import ca.cidco.depthstar.utilities.BigDecimalFactory;
import ca.cidco.depthstar.utilities.GeoUtils;
import ca.cidco.depthstar.utilities.GpsToUtcConverter;
import ca.cidco.depthstar.utilities.TimeUtils;
*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 * Lecteur de fichier 'Precise Point Positioning (PPP)'
 * @author David Sabatier,Guillaume Morissette
 */
public class PppNrcanReader {
    
    

    /**
     * Le format de date utilisé
     */
    public static String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
    
    public static String PPP_HEADER_1 = "DIR FRAME        STN         DOY YEAR-MM-DD HR:MN:SS.SSS NSV GDOP    SDC    SDP       DLAT(m)       DLON(m)       DHGT(m)         CLK(ns)   TZD(m)  SLAT(m)  SLON(m)  SHGT(m) SCLK(ns)  STZD(m) LAT(d) LAT(m)    LAT(s) LON(d) LON(m)    LON(s)   HGT(m) CGVD28_HTv2.0_Height NORTHING(m)  EASTING(m) ZONE SCALE_FACTOR HEMI   AM COMBINED_SCALE_FACTOR ";
    public static String PPP_HEADER_2 = "DIR FRAME  STN   DAYofYEAR YEAR-MM-DD HR:MN:SS.SS NSV GDOP RMSC(m) RMSP(m)       DLAT(m)       DLON(m)       DHGT(m)          CLK(ns)  TZD(m) SDLAT(95%) SDLON(95%) SDHGT(95%) SDCLK(95%) SDTZD(95%) LATDD LATMN    LATSS LONDD LONMN    LONSS     HGT(m) UTMZONE    UTM_EASTING   UTM_NORTHING UTM_SCLPNT UTM_SCLCBN MTMZONE    MTM_EASTING   MTM_NORTHING MTM_SCLPNT MTM_SCLCBN H:CGVD28(m)";
    public static String PPP_HEADER_4 = "DIR FRAME  STN   DAYofYEAR YEAR-MM-DD HR:MN:SS.SS NSV GDOP RMSC(m) RMSP(m)       DLAT(m)       DLON(m)       DHGT(m)          CLK(ns)  TZD(m) SDLAT(95%) SDLON(95%) SDHGT(95%) SDCLK(95%) SDTZD(95%) LATDD LATMN    LATSS LONDD LONMN    LONSS     HGT(m) UTMZONE    UTM_EASTING   UTM_NORTHING UTM_SCLPNT UTM_SCLCBN MTMZONE    MTM_EASTING   MTM_NORTHING MTM_SCLPNT MTM_SCLCBN H:CGVD28(m) SIGLAT_TOT(95%) SIGLON_TOT(95%) SIGHGT_TOT(95%)";
    public static String PPP_HEADER_3 = "DIR FRAME  STN   DAYofYEAR YEAR-MM-DD HR:MN:SS.SS NSV GDOP RMSC(m) RMSP(m)       DLAT(m)       DLON(m)       DHGT(m) SDLAT(95%) SDLON(95%) SDHGT(95%) LATDD LATMN    LATSS LONDD LONMN    LONSS     HGT(m) UTMZONE    UTM_EASTING   UTM_NORTHING UTM_SCLPNT UTM_SCLCBN MTMZONE    MTM_EASTING   MTM_NORTHING MTM_SCLPNT MTM_SCLCBN H:CGVD28(m) SIGLAT_TOT(95%) SIGLON_TOT(95%) SIGHGT_TOT(95%)";
    
    /**
     * Lit un fichier de post-processed kinematics (PPK)
     * @param filePath Chemin d'accès au média à lire
     * @return Liste des points lus ({@link ca.cidco.depthstar.project.surveyplatform.surveylines.SurveyLineDataPoint SurveyLineDataPoint})
     * @throws Exception Erreur en cours de lecture
     */
    public static PppNrcan readFile(String filePath) throws Exception{
        PppNrcan ppp = new PppNrcan();
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String line;
        
        boolean addZeroToMilliseconds =  true; //new PPP format time is in hundreths of second
        Pattern p = null;
        
        while ((line = br.readLine()) != null) {
            
            if(p == null) {
                if(line.equals(PPP_HEADER_1)) {
                    p = Pattern.compile("^\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{3})\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+).*");
                    addZeroToMilliseconds = false;
                } else if(line.equals(PPP_HEADER_2)) {
                    p = Pattern.compile("^\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{2})\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+).*");
                } else if(line.equals(PPP_HEADER_3)) {
                    p = Pattern.compile("^\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}.\\d{2})\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+).*");
                }
            } else {
                try{
                    Matcher m = p.matcher(line);

                    if(m.matches()){
                        String dateString = m.group(1);
                        
                        if(addZeroToMilliseconds) {
                            //Make PPP time format compatible with SimpleDateFormat
                            dateString = dateString + "0";
                        }

                        Date timestamp = TimeUtils.convertStringToDate(dateString, DATE_FORMAT);

                        Long gps2utcOffset = GpsToUtcConverter.getGpsToUtcOffset(timestamp);

                        // convert gps time to UTC
                        timestamp = Timestamp.from(timestamp.toInstant().minusSeconds(gps2utcOffset));

                        String[] lat = new String[] {m.group(2),m.group(3),m.group(4)};
                        BigDecimal latitude = GeoUtils.convertDMStoDecimalDegree(lat);

                        String[] lon = new String[] {m.group(5),m.group(6),m.group(7)};
                        BigDecimal longitude = GeoUtils.convertDMStoDecimalDegree(lon);

                        BigDecimal height = BigDecimalFactory.create(m.group(8));

                        PostProcessedPosition newLine = new PostProcessedPosition(timestamp,latitude,longitude,height,0l);
                        ppp.getPositions().add(newLine);                
                    }
                    else{
                        //Line didn't match
                    }
                }catch(Exception e){
                    //ignore bad lines
                }
                
            }
        }
        
        if(p == null) {
            throw new Exception("Unrecognised NRCAN PPP format");
        }
        return ppp;
    }
}