package ca.cidco.csb.test;

import static org.junit.Assert.*;


import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import ca.cidco.csb.georeference.BathymetryPoint;
import ca.cidco.csb.surveydata.Position;
import ca.cidco.csb.utilities.BigDecimalFactory;
import ca.cidco.csb.utilities.Interpolation;

public class InterpolationTest {
	
	private Timestamp buildTimestamp(String dateTime) throws Exception {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
		java.util.Date parsedDate = dateFormat.parse(dateTime);
		Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
		return timestamp ;
	}
	
//    private static final String TIDE_PATH = "test/rsc/TIDE/fake_tide.tid";
    private static final BigDecimal SEUIL = BigDecimalFactory.create("0.01");
    private static final double EPSILON = 0.00000000000001;
    
    
	//Create timestamp 
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
	String dateTime1= "2022-10-10 20:44:28.0";
	String dateTime2= "2022-10-10 20:44:54.0";
	String dateTime3= "2022-10-10 20:49:22.0";
	String dateTime4= "2022-10-11 01:34:27.0";
	String dateTime5= "2022-10-10 20:44:28.0"; //same as dateTime1
	
	buildTimestamp(dateTime1);
//	Timestamp ts1 = buildTimestamp(dateTime1);
//	Timestamp ts2 = buildTimestamp(dateTime2);
//	Timestamp ts3 = buildTimestamp(dateTime3);
//	Timestamp ts4 = buildTimestamp(dateTime4);
//	Timestamp ts5 = buildTimestamp(dateTime5);
	
    BigDecimal y1Latitude =			BigDecimalFactory.create("48");
    BigDecimal y1Longitude =		BigDecimalFactory.create("-69");
    BigDecimal y1EllipsoidalHeight=	BigDecimalFactory.create("0");
    BigDecimal y1Heading =			BigDecimalFactory.create("0");
    BigDecimal y1Pitch =			BigDecimalFactory.create("0");
    BigDecimal y1Roll =				BigDecimalFactory.create("0");
	
    BigDecimal y2Latitude =			BigDecimalFactory.create("49");
    BigDecimal y2Longitude =		BigDecimalFactory.create("-68");
    BigDecimal y2EllipsoidalHeight=	BigDecimalFactory.create("1");
    BigDecimal y2Heading=			BigDecimalFactory.create("30");
    BigDecimal y2Pitch =			BigDecimalFactory.create("50");
    BigDecimal y2Roll =				BigDecimalFactory.create("30");
	
	//	x (Timestamp)	
    BigDecimal xLatitude =			BigDecimalFactory.create("500");
    BigDecimal xLongitude =			BigDecimalFactory.create("500");
    BigDecimal xEllipsoidalHeight =	BigDecimalFactory.create("500");
    BigDecimal xHeading=			BigDecimalFactory.create("500");
    BigDecimal xPitch =				BigDecimalFactory.create("500");
    BigDecimal xRoll =				BigDecimalFactory.create("500");

	//	x1 (Timestamp)	
    BigDecimal x1Latitude	=		BigDecimalFactory.create("0");
    BigDecimal x1Longitude =		BigDecimalFactory.create("0");
    BigDecimal x1EllipsoidalHeight=	BigDecimalFactory.create("0");
    BigDecimal x1Heading =			BigDecimalFactory.create("200");
    BigDecimal x1Pitch =			BigDecimalFactory.create("200");
    BigDecimal x1Roll	=			BigDecimalFactory.create("200");

	//	x2 (Timestamp)	
    BigDecimal x2Latitude	=		BigDecimalFactory.create("800");
    BigDecimal x2Longitude =		BigDecimalFactory.create("800");
    BigDecimal x2EllipsoidalHeight=	BigDecimalFactory.create("800");
    BigDecimal x2Heading =			BigDecimalFactory.create("800");
    BigDecimal x2Pitch =			BigDecimalFactory.create("800");
    BigDecimal x2Roll	=			BigDecimalFactory.create("800");
	
    //	âˆ†t
    BigDecimal tLat= 				BigDecimalFactory.create("0.625");
    BigDecimal tLong = 				BigDecimalFactory.create("0.625");
    BigDecimal tHeight =			BigDecimalFactory.create("0.625");
    BigDecimal tHeading=			BigDecimalFactory.create("0.5");
    BigDecimal tPitch= 				BigDecimalFactory.create("0.5");
	BigDecimal tRoll= 				BigDecimalFactory.create("0.5");

	// y Interpolated values
    BigDecimal yLatitude =			BigDecimalFactory.create("48.62500000000000000000");
    BigDecimal yLongitude =		BigDecimalFactory.create("-68.37500000000000000000");
    BigDecimal yEllipsoidalHeight=	BigDecimalFactory.create("0.62500000000000000000");
    BigDecimal yHeading =			BigDecimalFactory.create("15.00000000000000000000");
    BigDecimal yPitch =			BigDecimalFactory.create("25.00000000000000000000");
    BigDecimal yRoll =				BigDecimalFactory.create("15.00000000000000000000");
	
	@Test
	public void testLinearInterpolation() {
		
		assertEquals(Interpolation.linearInterpolation(y1Latitude, y2Latitude, xLatitude, x1Latitude, x2Latitude), yLatitude);
		assertEquals(Interpolation.linearInterpolation(y1Longitude, y2Longitude, xLongitude, x1Longitude, x2Longitude), yLongitude);
		assertEquals(Interpolation.linearInterpolation(y1EllipsoidalHeight, y2EllipsoidalHeight, xEllipsoidalHeight, x1EllipsoidalHeight, x2EllipsoidalHeight), yEllipsoidalHeight);
		assertEquals(Interpolation.linearInterpolation(y1Heading, y2Heading, xHeading, x1Heading, x2Heading), yHeading);
		assertEquals(Interpolation.linearInterpolation(y1Pitch, y2Pitch, xPitch, x1Pitch, x2Pitch), yPitch);
		assertEquals(Interpolation.linearInterpolation(y1Roll, y2Roll, xRoll, x1Roll, x2Roll), yRoll);
	}

//	@Test
//	public void testInterpolatePosition() {
//		fail("Not yet implemented");
//	}
//
//	@Test
//	public void testInterpolateAttitude() {
//		fail("Not yet implemented");
//	}

//	@Test
//	public void testLinearInterpolationByTime() throws Exception {
//		fail("Not yet implemented");
//		Interpolation.linearInterpolationByTime(y1Latitude.doubleValue(), y2Latitude.doubleValue(), null, null, null);
//	}

//	@Test
//	public void testLinearAngleInterpolationByTime() {
//		fail("Not yet implemented");
//	}
}
