package ca.cidco.csb.surveyplatform.hydroblock;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import ca.cidco.csb.ppp.PppFile;
import ca.cidco.csb.surveydata.Attitude;
import ca.cidco.csb.surveydata.Depth;
import ca.cidco.csb.surveydata.Position;

public class Hydroblock20 {
	private ArrayList<Position> positions;
	private ArrayList<Attitude> attitudes;
	private ArrayList<Depth>	depths;
	
	public Hydroblock20() {
		
	}
	
	public void read(String dataPath) throws Exception{ 
		//TODO
		if (dataPath.contains("imu")) {
			File imuFile = new File(dataPath);

			try (FileReader fileReaderData = new FileReader(imuFile)) {
				BufferedReader bufferedReader = new BufferedReader(fileReaderData);
				String row;
				String[] split_row;	
				
				
				while ((row = bufferedReader.readLine()) !=null )  {

	    			split_row= row.split("[;]{1}");
					if(split_row[0].contains("Timestamp")){
						//do nothing
					}
					else {
						try {
							
							//Make timestamp with SimpleDateFormat
							SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSSSS");
							String dateTime= split_row[0];
						    java.util.Date parsedDate = dateFormat.parse(dateTime);
						    Timestamp timestamp = new java.sql.Timestamp(parsedDate.getTime());
							
							Double heading = Double.valueOf(split_row[1]); 
							Double pitch = Double.valueOf(split_row[2]); 
							Double roll = Double.valueOf(split_row[3]);

//						    built attitude with each rows and add them to attitudes
							Attitude attitude = new Attitude(timestamp, heading, pitch, roll);
							attitudes.add(attitude);
							
						}
						catch (Exception e) {
							System.err.println("Can not built Attitude with : "+row);
							e.printStackTrace();
								}
					}

						    //set Position parameter
						    try {
							    Double longitudeDD = Double.valueOf(split_row[header.getLonDdIndex()]);
							    Double longitudeMN = Double.valueOf(split_row[header.getLonMnIndex()]);
							    Double longitudeSS = Double.valueOf(split_row[header.getLonSsIndex()]);
							    Double latitudeDD = Double.valueOf(split_row[header.getLatDdIndex()]); 
							    Double latitudeMN = Double.valueOf(split_row[header.getLatMnIndex()]); 
							    Double latitudeSS = Double.valueOf(split_row[header.getLatSsIndex()]); 
							    Double height = Double.valueOf(split_row[header.getHgtIndex()]);
							    Double sdLongitude = Double.valueOf(split_row[header.getSdlonIndex()]);
							    Double sdLatitude = Double.valueOf(split_row[header.getSdlatIndex()]);
							    Double sdHeight = Double.valueOf(split_row[header.getSdhgtIndex()]);
							    Long numberOfSatellites = Long.valueOf(split_row[header.getNsvIndex()]);
							    Double gdop = Double.valueOf(split_row[header.getGdopIndex()]);

//							    built position with each rows and add them to PppFile
							    Position position= new Position(timestamp, longitudeDD,longitudeMN, longitudeSS, latitudeDD, latitudeMN, latitudeSS, height,sdLongitude,sdLatitude,sdHeight,numberOfSatellites,gdop);
							    ppp.getPositions().add(position);
						    }
							catch (Exception e) {
								System.err.println("Can not built position with : "+row);
								e.printStackTrace();
								}
			}
		}
		else {
			//pas imu 
		}

		
		
		
	}


	public ArrayList<Position> getPositions() {
		return positions;
	}


	public void setPositions(ArrayList<Position> positions) {
		this.positions = positions;
	}


	public ArrayList<Attitude> getAttitudes() {
		return attitudes;
	}


	public ArrayList<Depth> getDepths() {
		return depths;
	}
	
	
}
