package ca.cidco.csb.test;

import static org.junit.Assert.*;


import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import ca.cidco.csb.georeference.BathymetryPoint;
import ca.cidco.csb.surveydata.Position;
import ca.cidco.csb.utilities.BigDecimalFactory;
import ca.cidco.csb.utilities.Interpolation;

public class InterpolationTest {
	
//    private static final String TIDE_PATH = "test/rsc/TIDE/fake_tide.tid";
    private static final BigDecimal SEUIL = BigDecimalFactory.create("0.01");
    private static final double EPSILON = 0.00000000000001;
	
	
    BigDecimal y1Latitude =			BigDecimalFactory.create("48");
    BigDecimal y1Longitude =		BigDecimalFactory.create("-69");
    BigDecimal y1EllipsoidalHeight=	BigDecimalFactory.create("0");
    BigDecimal y1Heading =			BigDecimalFactory.create("0");
    BigDecimal y1Pitch =			BigDecimalFactory.create("0");
    BigDecimal y1Roll =				BigDecimalFactory.create("0");
	
    BigDecimal y2Latitude =			BigDecimalFactory.create("49");
    BigDecimal y2Longitude =		BigDecimalFactory.create("-68");
    BigDecimal y2EllipsoidalHeight=	BigDecimalFactory.create("1");
    BigDecimal y2Heading=			BigDecimalFactory.create("30");
    BigDecimal y2Pitch =			BigDecimalFactory.create("50");
    BigDecimal y2Roll =				BigDecimalFactory.create("30");
	
	//	x (Timestamp)	
    BigDecimal xLatitude =			BigDecimalFactory.create("500");
    BigDecimal xLongitude =			BigDecimalFactory.create("500");
    BigDecimal xEllipsoidalHeight =	BigDecimalFactory.create("500");
    BigDecimal xHeading=			BigDecimalFactory.create("500");
    BigDecimal xPitch =				BigDecimalFactory.create("500");
    BigDecimal xRoll =				BigDecimalFactory.create("500");

	//	x1 (Timestamp)	
    BigDecimal x1Latitude	=		BigDecimalFactory.create("0");
    BigDecimal x1Longitude =		BigDecimalFactory.create("0");
    BigDecimal x1EllipsoidalHeight=	BigDecimalFactory.create("0");
    BigDecimal x1Heading =			BigDecimalFactory.create("200");
    BigDecimal x1Pitch =			BigDecimalFactory.create("200");
    BigDecimal x1Roll	=			BigDecimalFactory.create("200");

	//	x2 (Timestamp)	
    BigDecimal x2Latitude	=		BigDecimalFactory.create("800");
    BigDecimal x2Longitude =		BigDecimalFactory.create("800");
    BigDecimal x2EllipsoidalHeight=	BigDecimalFactory.create("800");
    BigDecimal x2Heading =			BigDecimalFactory.create("800");
    BigDecimal x2Pitch =			BigDecimalFactory.create("800");
    BigDecimal x2Roll	=			BigDecimalFactory.create("800");
	
//	âˆ†t
    BigDecimal tLat= 				BigDecimalFactory.create("0.625");
    BigDecimal tLong = 				BigDecimalFactory.create("0.625");
    BigDecimal tHeight =			BigDecimalFactory.create("0.625");
    BigDecimal tHeading=			BigDecimalFactory.create("0.5");
    BigDecimal tPitch= 				BigDecimalFactory.create("0.5");
	BigDecimal tRoll= 				BigDecimalFactory.create("0.5");

	
	
	@Test
	public void testLinearInterpolation() {
		
		System.err.println(Interpolation.linearInterpolation(y1Latitude, y2Latitude, xLatitude, x1Latitude, x2Latitude));
		assertTrue(Interpolation.linearInterpolation(y1Latitude, y2Latitude, xLatitude, x1Latitude, x2Latitude)== BigDecimalFactory.create("48.62500000000000000000"));
		

	
	}
/*
	@Test
	public void testInterpolatePosition() {
		fail("Not yet implemented");
	}

	@Test
	public void testInterpolateAttitude() {
		fail("Not yet implemented");
	}

	@Test
	public void testLinearInterpolationByTime() {
		fail("Not yet implemented");
	}

	@Test
	public void testLinearAngleInterpolationByTime() {
		fail("Not yet implemented");
	}
*/
}
