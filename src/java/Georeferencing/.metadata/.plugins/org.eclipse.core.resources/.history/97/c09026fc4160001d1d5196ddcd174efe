package ca.cidco.csb.georeference;

import java.util.ArrayList;

import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;

import ca.cidco.csb.surveydata.Attitude;
import ca.cidco.csb.surveydata.Depth;
import ca.cidco.csb.surveydata.Position;
import ca.cidco.csb.utilities.Geodesy;

public class ErsGeoreferencing extends Georeference{

	double leverArmX;
	double leverArmY;
	double leverArmZ;
	double draft;
	double a= Geodesy.a;
	double e= Geodesy.e;
	
	public ErsGeoreferencing(Job job) {
		leverArmX= job.getLeverArmX;
		leverArmY= job.getLeverArmY;
		leverArmZ= job.getLeverArmZ;
		draft= job.getDraft;
	}
	
	

	@Override
	protected BathymetryPoint georeference(Position position, Attitude attitude, Depth depth) {
		// TODO 
		RealVector abi = new ArrayRealVector(new double[] { leverArmX, leverArmY, leverArmZ });
		
//	 	Georeferencing(
//		 double TravelTime,
//		double Roll, double Pitch, double Heading, double lat, double lon, double height_Ell_WL) {

//
//// Remove draft
////Zprofil = Zprofil.array() - draft;
//
////Convert Euler angles to radians
//Roll = (Roll * PI)/180;
//Pitch = (Pitch * PI)/180;
//Heading = (Heading * PI)/180;
//
////Convert lat/lon to radians
//lat = (lat *PI)/180;
//lon = (lon *PI)/180;
//
//// Refraction correction
//double rn1, rn2, rn3;
//RayTracing(rn1, rn2, rn3, Roll, Pitch, Heading, TravelTime, Cprofil, Zprofil);
//
//if (TypeSurvey == "ERS")
//{
//// Merging: CnTRF*(Pn + rn + Cbin*abi)
//double xTRF, yTRF, zTRF;
//merging(xTRF, yTRF, zTRF, rn1, rn2, rn3, lat, lon, height_Ell_WL, Roll, Pitch, Heading, abi, a, e);
//
//// Soundings' geographic coordinates
//ECEF_2_LatLonH(latGeoref, lonGeoref, hGeoref, xTRF, yTRF, zTRF, a, e);
//}
//
//// WLRS survey: (latitude, longitude, 0) is converted to TRF
//else
//{
//// Merging: CnTRF*(Pn + rn + Cbin*abi)
//double xTRF, yTRF, zTRF;
//merging(xTRF, yTRF, zTRF, rn1, rn2, rn3, lat, lon, 0, Roll, Pitch, Heading, abi, a, e);
//
//// Soundings' geographic coordinates
//ECEF_2_LatLonH(latGeoref, lonGeoref, hGeoref, xTRF, yTRF, zTRF, a, e);
//
//// Height wrt water level
//if (TypeSurvey == "WLRS") {hGeoref = hGeoref + height_Ell_WL;}
//
//// distance water surface seafloor
//if (TypeSurvey == "InstantDepth"){hGeoref = rn3 + draft;}
//}
//
//// Transform to degres: We add HeightWL to h
//latGeoref = latGeoref*180/PI;
//lonGeoref = lonGeoref*180/PI;
		
		
		
		
		
		BathymetryPoint bathymetryPoint= new BathymetryPoint(depth.getTimestamp(), position.getLongitude(), position.getLatitude(), position.getHeight(), position.getSdLongitude(), position.getSdLatitude(), position.getSdHeight());
		
		return bathymetryPoint;
	}

}
